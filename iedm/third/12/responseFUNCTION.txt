[
	{
		"original_line": "mappingArray[i] = (ti << 2) + tq;", 
		"bug_line": "mappingArray[i] = (ti << 2) - tq;",
		"error_description": "Replaced addition with subtraction, causing negative array indices when tq > (ti<<2). This leads to invalid memory access and constellation symbol corruption during Gray code mapping."
	},
	{
		"original_line": "real magv, tmpinphase, pha;", 
		"bug_line": "real magv, tmpinphase; integer pha;",
		"error_description": "Changing 'pha' from real to integer causes truncation of the phase offset value during assignment (pha = phase_offset * `M_PI). This leads to incorrect constellation rotation due to loss of fractional radians."
	},
	{
		"original_line": "parameter string Normalize_method = "Min_distance";", 
		"bug_line": "parameter string Normalize_method = "Min_dist";",
		"error_description": "Typo in normalization method name ('Min_dist' instead of 'Min_distance'). This causes the code to skip amplitude scaling since no matching normalization case is found, resulting in uncalibrated symbol magnitudes that violate the specified minimal distance constraint."
	},
	{
		"original_line": "PhaseImag[i] = ( 3 - (i % 4) * 2 ) * magv;", 
		"bug_line": "PhaseImag[i] = ( 3 - (i >> 2) * 2 ) * magv;",
		"error_description": "Replaced modulus operation with bit-shift, causing row index calculation instead of column index. This maps multiple symbols to the same imaginary value, collapsing the 4x4 constellation into 4 horizontal lines and destroying QAM modulation."
	},
	{
		"original_line": "integer i, use_seed;", 
		"bug_line": "integer i, unused_seed;",
		"error_description": "The seed variable is mistakenly declared as 'unused_seed' instead of 'use_seed'. This causes the random number generator ($rdist_uniform) to reference an undeclared variable 'use_seed' when Disable_input=1, leading to simulation errors or incorrect random symbol generation."
	},
	{
		"original_line": "tmpInteger = mappingArray[integerOut];", 
		"bug_line": "tmpInteger = mappingArray[integerOut % 15];",
		"error_description": "Modulo 15 operation causes symbol 15 to wrap to index 0, resulting in constellation collision (symbols 0 and 15 both map to array[0]) and skips the last constellation point (index 15 remains unused)."
	},
	{
		"original_line": "real tmp[0:`Bits-1];", 
		"bug_line": "real tmp[0:`Bits];",
		"error_description": "The array 'tmp' is incorrectly sized with indices 0 to `Bits` (17 elements) instead of 0 to `Bits-1` (16 elements). This causes out-of-bounds access during the generate loop (0 to 15), leading to undefined values in bit processing and symbol mapping errors."
	},
	{
		"original_line": "integer mappingArray[0:`M-1];", 
		"bug_line": "integer mappingArray[1:`M];",
		"error_description": "Changed array bounds from [0:15] to [1:16], causing out-of-bounds access when initializing/accessing index 0. The loop writes to mappingArray[0] which is now invalid, and symbol index 0 will attempt to read non-existent location."
	},
	{
		"original_line": "    if (phase_offset > 0) begin", 
		"bug_line": "    if (phase_offset < 0) begin",
		"error_description": "The condition incorrectly checks for negative phase_offset instead of positive. Since phase_offset is defined with range (0:inf), this condition will never be true, preventing phase rotation from ever being applied regardless of the parameter value."
	},
	{
		"original_line": "            tmpinphase = PhaseReal[i];", 
		"bug_line": "            tmpinphase = PhaseImag[i];",
		"error_description": "Stores the imaginary component instead of the real component in the temporary variable, causing incorrect rotation calculations where the real part update uses the wrong value, leading to distorted constellation points."
	},
	{
		"original_line": "integerOut = 0;", 
		"bug_line": "integerOut = integerOut;",
		"error_description": "The symbol index variable 'integerOut' is not reset to zero at the start of each symbol period. This causes the current symbol index to accumulate with previous values, leading to incorrect constellation mapping and potential array index out-of-bounds errors."
	},
	{
		"original_line": "integerOut = 0;", 
		"bug_line": "integerOut = 1;",
		"error_description": "Initializing integerOut to 1 instead of 0 introduces a constant offset in the symbol index calculation. This causes all input symbols to be mapped to incorrect constellation points (offset by +1), and for input 15 (1111), it results in an out-of-bounds array access (index 16), leading to undefined behavior."
	},
	{
		"original_line": "`include "constants.vams"", 
		"bug_line": "`define M_PI 0",
		"error_description": "Redefines mathematical constant Ï€ as 0 instead of the accurate value from constants.vams. This causes phase_offset calculations to always result in 0 radians, eliminating constellation rotation regardless of the phase_offset parameter value."
	},
	{
		"original_line": "(* instrument_module *)", 
		"bug_line": "(* no_instrument_module *)",
		"error_description": "Changing 'instrument_module' to 'no_instrument_module' disables required signal instrumentation. This prevents simulation tools from monitoring internal signals, causing undetected errors in testbenches that rely on instrumented data for verification."
	},
	{
		"original_line": "input [0:`Bits -1] inbit;", 
		"bug_line": "input [0:`Bits-2] inbit;",
		"error_description": "Reduces input vector width from 4 bits to 3 bits. Causes out-of-bound access during bit processing (V(inbit[3]) becomes invalid), corrupting symbol mapping calculations."
	},
	{
		"original_line": "`include "disciplines.vams"", 
		"bug_line": "`include "disciplines_wrong.vams"",
		"error_description": "Changed include filename to a non-existent file, causing compilation failure due to missing electrical discipline definitions required for signal processing."
	},
	{
		"original_line": "module Rectangular_16_QAM(inbit, outi, outq);", 
		"bug_line": "module Rectangular_16_QAM(inbit, outq, outi);",
		"error_description": "Swapped positions of outi and outq in port list causes I/Q outputs to be reversed, misassigning in-phase and quadrature components to wrong physical connections."
	},
	{
		"original_line": "integer mappingArray[0:`M-1];", 
		"bug_line": "integer mappingArray[0:`M];",
		"error_description": "Changed array size from 16 elements (0-15) to 17 elements (0-16). The initialization loop only assigns values to indices 0-15, leaving index 16 uninitialized. During symbol mapping, if tmpInteger=16 occurs (due to input pattern or randomization), it accesses an uninitialized value, causing undefined constellation point selection."
	},
	{
		"original_line": "for (i = 0; i < `M; i = i + 1) begin", 
		"bug_line": "for (i = 0; i < `M; i = i + 2) begin",
		"error_description": "Changed loop increment to i+2, causing only even indices (0,2,4,...,14) to be initialized. Odd indices (1,3,...,15) remain uninitialized, resulting in undefined constellation points for half the symbols."
	},
	{
		"original_line": "for (i=0; i < `Bits; i = i+1)", 
		"bug_line": "for (i=0; i < `Bits-1; i = i+1)",
		"error_description": "The loop condition stops at `Bits-1` instead of `Bits`, causing it to process only the first 3 bits (indices 0-2) while skipping the last bit (index 3, the MSB). This ignores the most significant input bit during symbol mapping, resulting in incorrect integerOut calculations and constellation point selection."
	}
]