[
	{
		"original_line": "electrical I_in, Q_in, I_out, Q_out;", 
		"bug_line": "electrical I_in Q_in, I_out, Q_out;",
		"error_description": "Missing comma between identifier declarations causes syntax error - identifiers must be comma-separated in net lists"
	},
	{
		"original_line": "    if ( ceil(over_samples/(4*alpha)) == floor( over_samples/(4*alpha)) )", 
		"bug_line": "    if ( ceil(over_samples/(4*alpha)) == floor( over_samples/(4*alpha)) ",
		"error_description": "Missing closing parenthesis for the condition in the if statement. The condition requires balanced parentheses, but the final closing parenthesis was removed."
	},
	{
		"original_line": "filter_taps[middle] =  tmp * gain;", 
		"bug_line": "filter_taps[middle] =  tmp * gain",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "input  I_in,  Q_in;", 
		"bug_line": "input  I_in  Q_in;",
		"error_description": "Missing comma between port identifiers in the input declaration. VerilogA requires commas to separate multiple ports in a single declaration statement."
	},
	{
		"original_line": "      q_input_data[i] = 0;", 
		"bug_line": "      q_input_data[i] = 0",
		"error_description": "Missing semicolon at the end of the assignment statement, causing a syntax error as the next token 'i_input_data' becomes part of the same statement without an operator."
	},
	{
		"original_line": "    delay = group_delay*over_samples;", 
		"bug_line": "    delay = group_delay*over_samples",
		"error_description": "Missing semicolon at the end of the assignment statement. This causes a syntax error as the next non-comment line ('taps =2*delay+1;') will be parsed as part of the same statement."
	},
	{
		"original_line": "              tmp2 = sin  ( alpha1 * tmp * `M_PI) / tmp4;", 
		"bug_line": "              tmp2 = sin  ( alpha1 * tmp * `M_PI) / tmp4",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "        if ( Upflag == over_samples )", 
		"bug_line": "        if ( Upflag == over_samples ",
		"error_description": "Missing closing parenthesis ')' for the condition in the if statement."
	},
	{
		"original_line": "parameter integer over_samples = 8;", 
		"bug_line": "paramter integer over_samples = 8;",
		"error_description": "Misspelled keyword 'paramter' instead of 'parameter'"
	},
	{
		"original_line": "period = frame_time / over_samples / numChipsOut;", 
		"bug_line": "period = frame_time over_samples / numChipsOut;",
		"error_description": "Missing division operator between 'frame_time' and 'over_samples', creating invalid adjacent identifiers without operator"
	},
	{
		"original_line": "alpha1 = 1 - alpha;", 
		"bug_line": "alpha1 = 1 - alpha",
		"error_description": "Missing semicolon at the end of the assignment statement, causing a syntax error as the next line 'alpha2 = 1 + alpha;' will be parsed as a continuation of the same statement."
	},
	{
		"original_line": "tmp1 = cos ( alpha2 * tmp * `M_PI);", 
		"bug_line": "tmp1 = cos ( alpha2 * * tmp * `M_PI);",
		"error_description": "Consecutive multiplication operators '*' without an operand in between creates an invalid expression."
	},
	{
		"original_line": "parameter real frame_time = 1.0/15000.0;", 
		"bug_line": "paramter real frame_time = 1.0/15000.0;",
		"error_description": "Misspelled keyword 'paramter' instead of 'parameter'"
	},
	{
		"original_line": "i_input_data[i] =  i_input_data[i-1];", 
		"bug_line": "i_input_data[i] =  i_input_data[i-1;",
		"error_description": "Missing closing bracket ']' in array index, causing unmatched bracket syntax error."
	},
	{
		"original_line": "        q_input_data[0:(2*group_delay*over_samples+1)];", 
		"bug_line": "        q_input_data[0:(2*group_delay*over_samples+1);",
		"error_description": "Missing closing bracket ']' in array dimension specifier, causing a syntax error due to unmatched opening bracket."
	},
	{
		"original_line": "    end else begin", 
		"bug_line": "    end elsee begin",
		"error_description": "Misspelled keyword 'else' as 'elsee' which is not a valid VerilogA keyword"
	},
	{
		"original_line": "alpha2 = 1 + alpha;", 
		"bug_line": "alpha2 = 1 + alpha",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "    if ( ceil(over_samples/(4*alpha)) == floor( over_samples/(4*alpha)) )", 
		"bug_line": "    if ( ceil(over_samples/(4 alpha)) == floor( over_samples/(4*alpha)) )",
		"error_description": "Missing multiplication operator between 4 and alpha creates an invalid token sequence ('4 alpha'), causing a syntax error due to unexpected identifier."
	},
	{
		"original_line": "filter_taps[middle] =  tmp * gain;", 
		"bug_line": "filter_taps[middle] =  tmp * gain",
		"error_description": "Missing semicolon at the end of the assignment statement. VerilogA requires all statements to terminate with a semicolon."
	},
	{
		"original_line": "  V(Q_out) <+ q_out;", 
		"bug_line": "  V(Q_out) <+ q_out",
		"error_description": "Missing semicolon at the end of the contribution statement causes unterminated expression syntax error"
	}
]