[
	{
		"original_line": "   real      s12, s21;", 
		"bug_line": "   real      s12 s21;",
		"error_description": "Missing comma between variable declarations. VerilogA requires commas to separate multiple variables declared in a single statement."
	},
	{
		"original_line": "         q = sqrt(s21/(3*c3));", 
		"bug_line": "         q = sqrt(s21/(3*c3);",
		"error_description": "Missing closing parenthesis for the sqrt function call. The expression has unmatched parentheses."
	},
	{
		"original_line": "   parameter real rin = 50 from (0:inf);", 
		"bug_line": "   parameter real rin = 50 from (0:inf)",
		"error_description": "Missing semicolon at the end of the parameter declaration"
	},
	{
		"original_line": "poutput = a1*s21;", 
		"bug_line": "poutput = a1*s21",
		"error_description": "Missing semicolon at the end of the assignment statement. VerilogA requires all statements within analog blocks to terminate with semicolons."
	},
	{
		"original_line": "   parameter real psat = 35;", 
		"bug_line": "   parameter real psat = 35",
		"error_description": "Missing semicolon at the end of the parameter declaration. VerilogA requires all parameter statements to terminate with a semicolon."
	},
	{
		"original_line": " *  by Cadence Design Systems, Inc.  All rights reserved.", 
		"bug_line": " *  by Cadence Design Systems, Inc.  All rights reserved. */",
		"error_description": "Added '*/' prematurely terminating the multi-line comment block. This causes subsequent lines (7-12) to be interpreted as invalid VerilogA code instead of remaining commented."
	},
	{
		"original_line": "    $strobe("Warning: Psat too big compared to 1db compression point.");", 
		"bug_line": "    $strobe("Warning: Psat too big compared to 1db compression point.);",
		"error_description": "Unterminated string literal (missing closing double quote)"
	},
	{
		"original_line": "s21 = `db20_real(gain);", 
		"bug_line": "s21 = `db20_real(gain)",
		"error_description": "Missing semicolon at the end of the statement"
	},
	{
		"original_line": "alimit = sqrt(s21/(3*c3));", 
		"bug_line": "alimit = sqrt(s21/(3*c3);",
		"error_description": "Missing closing parenthesis for the sqrt function call. The expression inside sqrt remains unclosed, causing a syntax error due to mismatched parentheses."
	},
	{
		"original_line": "alimit = (p+q)/2;", 
		"bug_line": "alimit = (p+q/2;",
		"error_description": "Missing closing parenthesis for the expression (p+q, leading to unmatched parentheses syntax error"
	},
	{
		"original_line": "   parameter real rout = 50 from (0:inf);", 
		"bug_line": "   parameter real rout = 50 from (0:inf];",
		"error_description": "Mismatched brackets: range expression opened with '(' but closed with ']' instead of required ')'"
	},
	{
		"original_line": "I(in) <+ white_noise(noise_current*noise_current, "pa");", 
		"bug_line": "I(in) <+ white_noise(noise_current*noise_current "pa");",
		"error_description": "Missing comma between function arguments"
	},
	{
		"original_line": "    $strobe("Warning: Psat too big compared to 1db compression point.");", 
		"bug_line": "    $strobe("Warning: Psat too big compared to 1db compression point.);",
		"error_description": "Unterminated string literal: missing closing double quote before the parenthesis"
	},
	{
		"original_line": " *  $Revision: 1.1 $", 
		"bug_line": " *  $Revision: 1.1 $ */",
		"error_description": "Prematurely ends the multi-line comment at line 9, causing the following line 10 (' *') to be uncommented. The asterisk '*' on line 10 becomes an invalid token outside comment scope."
	},
	{
		"original_line": "        alimit = sqrt(s21/(3*c3));", 
		"bug_line": "        alimit = sqrt(s21/(3*c3);",
		"error_description": "Missing closing parenthesis for the sqrt function call. The expression inside sqrt requires balanced parentheses, but one closing parenthesis was removed, causing a syntax error."
	},
	{
		"original_line": "   real      rnf;           // real NF", 
		"bug_line": "   real      rnf            // real NF",
		"error_description": "Missing semicolon at the end of the variable declaration, causing a syntax error as the parser expects a semicolon to terminate the statement before the next declaration."
	},
	{
		"original_line": " c3  = 0.145*s21/(2*rp1db*4);", 
		"bug_line": " c3  = 0.145*s21/(2*rp1db*4;",
		"error_description": "Unmatched opening parenthesis: The expression ends without closing the parentheses group started after the division operator."
	},
	{
		"original_line": "a2 = V(out)/sqrt(rout) + I(out, out_int)*sqrt(rout);", 
		"bug_line": "a2 = V(out)/sqrt(rout) + I(out, out_int)*sqrt(rout;",
		"error_description": "Missing closing parenthesis for the sqrt function call in the second term, resulting in unmatched parentheses."
	},
	{
		"original_line": " asat = sqrt(8*rpsat);", 
		"bug_line": " asat = sqrt(8*rpsat;",
		"error_description": "Missing closing parenthesis for sqrt function call. The unmatched '(' causes a syntax error as the compiler expects a closing parenthesis to complete the function argument list."
	},
	{
		"original_line": "              if(`outp(alimit) > 3.1415926/4*asat ) ", 
		"bug_line": "              if(`outp(alimit > 3.1415926/4*asat ) ",
		"error_description": "Missing closing parenthesis for macro `outp invocation. The expression `outp(alimit) becomes `outp(alimit which is unterminated, causing a syntax error."
	}
]