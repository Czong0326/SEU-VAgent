[
	{
		"original_line": "			@ ( timer( stopWindow )) begin", 
		"bug_line": "			@ ( timer( stopWindow ) begin",
		"error_description": "Missing closing parenthesis for the event control expression. The unbalanced parentheses cause a syntax error as the compiler expects ') begin' to match the opening '(' after '@'."
	},
	{
		"original_line": "parameter real stop_td = 0;", 
		"bug_line": "parameter real stop_td = 0",
		"error_description": "Missing semicolon at the end of parameter declaration"
	},
	{
		"original_line": "real startMaxValue, startMinValue;", 
		"bug_line": "real startMaxValue, startMinValue",
		"error_description": "Missing semicolon at the end of the declaration statement."
	},
	{
		"original_line": "        else if (mode == `fall) direction = -1;", 
		"bug_line": "        else if (mode == `fall) direction = -1",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "    real outPP, outRMS, outSigma;", 
		"bug_line": "    real outPP outRMS, outSigma;",
		"error_description": "Missing comma between variable declarations 'outPP' and 'outRMS', causing invalid syntax where identifiers appear consecutively without separation."
	},
	{
		"original_line": "            startMinValue = 1M;", 
		"bug_line": "            startMinValue = 1 M;",
		"error_description": "Space inserted between '1' and 'M' makes 'M' an invalid separate token instead of part of the real number literal '1M' (1e6)."
	},
	{
		"original_line": "    if (startWindow == -1M) begin", 
		"bug_line": "    if (startWindow == -1M begin",
		"error_description": "Missing closing parenthesis ')' before the 'begin' keyword. The condition lacks proper termination, causing unbalanced parentheses in the conditional statement."
	},
	{
		"original_line": "if ( crossStopDirection ) begin", 
		"bug_line": "if ( crossStopDirection ) begn",
		"error_description": "Misspelled 'begin' keyword as 'begn' causing unrecognized token syntax error"
	},
	{
		"original_line": "real loc_start_mode, loc_stop_mode;", 
		"bug_line": "real loc_start_mode; loc_stop_mode;",
		"error_description": "Missing comma separator between variable declarations. The semicolon prematurely terminates the 'real' type declaration, leaving 'loc_stop_mode' undeclared as a real type."
	},
	{
		"original_line": "outAreaS = idt(outCur*outCur - outCurHold*outCurHold, 0.0);", 
		"bug_line": "outAreaS = idt(outCur*outCur - outCurHold*outCurHold 0.0);",
		"error_description": "Missing comma between function arguments in idt() call. VerilogA requires commas to separate multiple function arguments."
	},
	{
		"original_line": "       if (analysis("tran")) begin", 
		"bug_line": "       if (analysis("tran") begin",
		"error_description": "Missing closing parenthesis for function call 'analysis("tran")' before 'begin' keyword"
	},
	{
		"original_line": " argstartCur = 0.0;", 
		"bug_line": " argstartCur == 0.0;",
		"error_description": "Using double equals '==' (comparison operator) instead of single equals '=' (assignment operator) for variable assignment."
	},
	{
		"original_line": "       outAvg = outArea/window;", 
		"bug_line": "       outAvg = outArea window;",
		"error_description": "Missing division operator between 'outArea' and 'window', resulting in adjacent identifiers without an operator - a syntax error in VerilogA."
	},
	{
		"original_line": "stopWindow = stop_arg;", 
		"bug_line": "stopWindow = stop_arg + ;",
		"error_description": "Missing operand after '+' operator. The '+' operator requires a right-hand expression, but none is provided."
	},
	{
		"original_line": "parameter integer start_mode = 1;", 
		"bug_line": "parameter integre start_mode = 1;",
		"error_description": "Misspelled keyword 'integer' as 'integre' which is not a valid VerilogA data type"
	},
	{
		"original_line": "       $strobe("        standard deviation = %e\n", startSigma);", 
		"bug_line": "       $strobe("        standard deviation = %e\n" startSigma);",
		"error_description": "Missing comma separator between string format and variable argument in $strobe system task call."
	},
	{
		"original_line": "`define fall  2", 
		"bug_line": "`define fall  2;",
		"error_description": "Semicolon added at the end of a preprocessor directive. VerilogA preprocessor directives must not be terminated with semicolons, causing a syntax error."
	},
	{
		"original_line": "         lc_stopDirection = last_crossing(V(stop_pos, stop_neg) - ", 
		"bug_line": "         lc_stopDirection = last_crossing(V(stop_pos stop_neg) - ",
		"error_description": "Missing comma between function arguments in the voltage potential call V(stop_pos stop_neg), resulting in invalid syntax for the two-pin function."
	},
	{
		"original_line": "`define arg   0", 
		"bug_line": "`define arg   0;",
		"error_description": "Preprocessor directives like `define cannot be terminated with semicolons in VerilogA. The semicolon creates invalid syntax for macro definitions."
	},
	{
		"original_line": "    doMeasure = `NO;", 
		"bug_line": "    doMeasure = `NO",
		"error_description": "Missing semicolon at the end of the assignment statement. VerilogA requires all statements to be terminated with semicolons."
	}
]