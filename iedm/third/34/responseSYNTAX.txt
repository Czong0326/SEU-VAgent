[
	{
		"original_line": "        tmpReal = `M_TWO_PI / `FFTLENGTH;", 
		"bug_line": "        tmpReal = `M_TWO_PI / `FFTLENGTH + ;",
		"error_description": "Syntax error due to trailing '+' operator without a right operand."
	},
	{
		"original_line": "initial_time = dump_frame * frame_time;", 
		"bug_line": "initial_time = dump_frame * frame_time",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "        else tmp = 1;", 
		"bug_line": "        else tmp = 1",
		"error_description": "Missing semicolon at the end of the assignment statement in the else branch. VerilogA requires all statements to be properly terminated with semicolons."
	},
	{
		"original_line": "        n = 0;", 
		"bug_line": "        n = 0",
		"error_description": "Missing semicolon at the end of the assignment statement. VerilogA requires all statements to end with a semicolon."
	},
	{
		"original_line": "        tmp         = tmp - 1;", 
		"bug_line": "        tmp         = tmp - ;",
		"error_description": "Missing operand after '-' operator - the subtraction operation requires a right-hand side expression"
	},
	{
		"original_line": "    end else begin", 
		"bug_line": "    end else begn",
		"error_description": "Misspelled keyword 'begin' as 'begn' causing undefined keyword error"
	},
	{
		"original_line": "parameter integer poly_order = 7;", 
		"bug_line": "parameter integer poly_order = 7",
		"error_description": "Missing required semicolon at the end of the parameter declaration"
	},
	{
		"original_line": "    outReal  = 0;", 
		"bug_line": "    outReal  = 0",
		"error_description": "Missing semicolon at the end of the assignment statement. VerilogA requires semicolons to terminate statements."
	},
	{
		"original_line": "        tmpImag = Im_freq[tmp]  + cos_theta[i]  * tmpImag + sin_theta[i] * tmpReal;", 
		"bug_line": "        tmpImag = Im_freq[tmp]  + cos_theta[i]  * tmpImag + sin_theta[i] * tmpReal",
		"error_description": "Missing semicolon at the end of the assignment statement, causing syntax error due to unterminated expression"
	},
	{
		"original_line": "for ( i = 0; i < `FFTLENGTH; i = i + 1 ) begin", 
		"bug_line": "for ( i = 0; i < `FFTLENGTH i = i + 1 ) begin",
		"error_description": "Missing semicolon after condition in for-loop statement"
	},
	{
		"original_line": "end /* i loop */", 
		"bug_line": " /* i loop */",
		"error_description": "Missing 'end' keyword to terminate the inner for-loop block, leaving the 'begin' statement unclosed"
	},
	{
		"original_line": "    if ( cnt == 80 ) cnt = 0;", 
		"bug_line": "    if ( cnt == 80  cnt = 0;",
		"error_description": "Missing closing parenthesis for the condition in the if statement, resulting in a syntax error due to unclosed parentheses and invalid expression structure."
	},
	{
		"original_line": "          maskArray[j] = shift[0];", 
		"bug_line": "          maskArray[j] = shift[0};",
		"error_description": "Mismatched bracket: used curly brace '}' instead of square bracket ']' to close array index, creating invalid syntax for indexing operation."
	},
	{
		"original_line": "outReal  = 0;", 
		"bug_line": "outReal  := 0;",
		"error_description": "Using ':=' assignment operator is invalid in VerilogA analog blocks; the correct operator is '=' for blocking assignments."
	},
	{
		"original_line": "      else tmp = state[0];", 
		"bug_line": "      elze tmp = state[0];",
		"error_description": "Misspelled keyword 'else' as 'elze' causing unrecognized conditional branch keyword"
	},
	{
		"original_line": "    else i = cnt - `CYCLICSamples;", 
		"bug_line": "    else i = cnt - `CYCLICSamples",
		"error_description": "Missing semicolon at the end of the assignment statement, causing unterminated expression that will conflict with the next line of code."
	},
	{
		"original_line": "                tmp = tmp   + poly[i] * regiArray[i];", 
		"bug_line": "                tmp = tmp   + poly[i] * regiArray[i]",
		"error_description": "Missing semicolon at the end of the statement"
	},
	{
		"original_line": "  @(initial_step) begin", 
		"bug_line": "  @(initial_step begin",
		"error_description": "Missing closing parenthesis ')' for event control syntax. VerilogA requires balanced parentheses in event controls like @(event)."
	},
	{
		"original_line": "          tmp         = tmp - 1;", 
		"bug_line": "          tmp         = tmp - 1",
		"error_description": "Missing semicolon at the end of the assignment statement, causing a syntax error where the parser expects either an end-of-statement or another token but encounters the 'for' keyword instead."
	},
	{
		"original_line": "    cnt = cnt + 1;", 
		"bug_line": "    cnt = cnt + 1",
		"error_description": "Missing semicolon at the end of the assignment statement"
	}
]