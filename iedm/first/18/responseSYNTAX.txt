[
	{
		"original_line": "resistor  #(.r(r_nom)) r1 (comm, ref);", 
		"bug_line": "resistor  #(.r(r_nom)) r1 (comm ref);",
		"error_description": "Missing comma between ports in the instance port list causes a syntax error as 'comm ref' is interpreted as a single token instead of two separate ports."
	},
	{
		"original_line": "parameter real pole_freq = 3M;", 
		"bug_line": "parameter real pole_freq = 3M",
		"error_description": "Missing semicolon at the end of parameter declaration"
	},
	{
		"original_line": "        capacitor #(.c(1/(r_nom*2 * `PI * zero_freq) -", 
		"bug_line": "        capacitor #(.c(1/(r_nom*2 * `PI * zero_freq),",
		"error_description": "Replaced '-' with ',' causing invalid comma separator between expressions in parameter assignment. The parameter list now incorrectly contains two arguments for a single parameter."
	},
	{
		"original_line": "parameter real zero_freq = 0.5M;", 
		"bug_line": "parameter real zero_freq = 0.5M",
		"error_description": "Missing semicolon at the end of the parameter declaration"
	},
	{
		"original_line": "        electrical comm;", 
		"bug_line": "        electrical comm",
		"error_description": "Missing semicolon at the end of the node declaration statement"
	},
	{
		"original_line": "parameter real zero_freq = 0.5M;", 
		"bug_line": "parameter real zero_freq 0.5M;",
		"error_description": "Missing assignment operator '=' in parameter declaration"
	},
	{
		"original_line": "module dig_pll_lpf(in, ref);", 
		"bug_line": "moduel dig_pll_lpf(in, ref);",
		"error_description": "Misspelled keyword 'module' as 'moduel', causing invalid module declaration syntax"
	},
	{
		"original_line": "$display("Unrealisable filter:  pole's frequency = (%E) less than zero's frequency = (%E).\n", pole_freq, zero_freq );", 
		"bug_line": "$disply("Unrealisable filter:  pole's frequency = (%E) less than zero's frequency = (%E).\n", pole_freq, zero_freq );",
		"error_description": "Misspelled system task name: '$disply' is not a valid VerilogA system task (should be '$display')."
	},
	{
		"original_line": "                 if (pole_freq <= zero_freq) begin", 
		"bug_line": "                 if (pole_freq =< zero_freq) begin",
		"error_description": "Invalid operator '=<' used instead of correct '<=' for less-than-or-equal comparison. VerilogA requires '<=' operator."
	},
	{
		"original_line": "        resistor  #(.r(r_nom)) r1 (comm, ref);", 
		"bug_line": "        resistor  #(.r(r_nom)) r1 (comm ref);",
		"error_description": "Missing comma between nodes in port connection list. Verilog-A requires commas to separate multiple connections in module instantiations."
	},
	{
		"original_line": "parameter real r_nom = 10K;", 
		"bug_line": "parameter real r_nom = 10K",
		"error_description": "Missing semicolon at the end of the parameter declaration, causing unterminated statement."
	},
	{
		"original_line": "   analog begin", 
		"bug_line": "   analog begn",
		"error_description": "Misspelled 'begin' keyword as 'begn'. VerilogA requires correct 'begin' keyword to start analog blocks."
	},
	{
		"original_line": "               c1 (comm, ref) ;", 
		"bug_line": "               c1 (comm, ref ;",
		"error_description": "Missing closing parenthesis ')' for the instance port list, causing unbalanced parentheses and unterminated port connection."
	},
	{
		"original_line": "        capacitor #(.c(1/(r_nom*2 * `PI * pole_freq)) )", 
		"bug_line": "        capacitor #(.c(1/(r_nom*2 * `PI * pole_freq)) ",
		"error_description": "Missing closing parenthesis for the module instance parameter list, causing unterminated parameter list syntax error."
	},
	{
		"original_line": "capacitor #(.c(1/(r_nom*2 * `PI * pole_freq)) )", 
		"bug_line": "capacitor #(.c(1/(r_nom*2 * `PI * * pole_freq)) )",
		"error_description": "Consecutive multiplication operators (* *) create invalid VerilogA syntax due to missing operand between operators."
	},
	{
		"original_line": "         if (pole_freq <= zero_freq) begin", 
		"bug_line": "         if (pole_freq <= zero_freq begin",
		"error_description": "Missing closing parenthesis ')' in conditional expression"
	},
	{
		"original_line": "        if (pole_freq <= zero_freq) begin", 
		"bug_line": "        if pole_freq <= zero_freq) begin",
		"error_description": "Missing opening parenthesis after 'if' keyword"
	},
	{
		"original_line": "      @ (initial_step) begin", 
		"bug_line": "      @ (initial_step begin",
		"error_description": "Missing closing parenthesis for the event control expression. The syntax requires parentheses around event controls like initial_step."
	},
	{
		"original_line": "parameter real r_nom = 10K;", 
		"bug_line": "parameter real r_nom = 10K",
		"error_description": "Missing semicolon at the end of the parameter declaration. VerilogA requires semicolons to terminate parameter statements."
	},
	{
		"original_line": "         $finish;", 
		"bug_line": "         $finissh;",
		"error_description": "Misspelled system task name: '$finissh' is not a valid Verilog-A system task. Correct spelling is '$finish'."
	}
]