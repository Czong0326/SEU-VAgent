//======================================================================
//Copyright @ 2016 Massachusetts Institute of Technology (MIT)
// 
// The terms under which the software and associated documentation
// (the Software) is provided are as the following:
// 
// The Software is provided "as is", without warranty of any kind,
// express or implied, including but not limited to the warranties of
// merchantability, fitness for a particular purpose and noninfringement.
// In no event shall the authors or copyright holders be liable for any claim,
// damages or other liability, whether in an action of contract,
// tort or otherwise, arising from, out of or in connection with the Software
// or the use or other dealings in the Software.
// 
// MIT grants, free of charge, to any users the right to modify, copy,
// and redistribute the Software, both within the user's organization and
// externally, subject to the following restrictions:
// 
// 1. The users agree not to charge for the MIT code itself but may charge
//      for additions, extensions, or support.
// 
// 2. In any product based on the Software, the users agree to acknowledge
//      the MIT Computational Prototyping Research Group that developed
//      the software. This acknowledgment shall appear in the product
//      documentation.
// 
// 3. The users agree to obey all U.S. Government restrictions governing
//      redistribution or export of the software.
// 
// 4. The users agree to reproduce any copyright notice which appears on
//      the software on any copy or modification of such made available to others.
// 
// Agreed to by 
// Luca Daniel, MIT
// March 1st, 2016
//======================================================================
// rbtConst.va
//======================================================================
// Constants and default values for RBT Compact model
//
// Version: 1.0.0
// Tested on: Cadence Spectre 15.1.0.284.isr1
//
// Author: Bichoy Bahr [bichoy at mit dot edu]
// Last Modified: March 31st, 2016


//======================================================================
// Model Constants
//======================================================================

`ifdef __RBT_CONST_VAMS__
`else
`define __RBT_CONST_VAMS__


// Smoothing factor for mobility modulation
`define RBT_MVSS_SMOOTHTANH 0.99
// Drive strain smoothing
`define RBT_GAP_SMOOTHTANH 0.8
// fmax for mtline model
`define RBT_FMAX 2.5e10

// BSIM constants
`define ntype 1
`define ptype -1
`define __RDSMOD__
`define __TNOISW__
`define __RGATEMOD__
`define __RBODYMOD__
`define __SHMOD__


//======================================================================
// Default parameters values
//======================================================================

// Default parameters values
`define RBT_G 1.2n      // Capacitive transducer dielectric thickness
`define RBT_EPSD 4      // Relative permittivity of transducer dielectric

`define RBT_NTERM 7 // Number of termination lambda/4 sections

`define RBT_L 426n      // Resonator main cavity length
`define RBT_LA 213n     // Termination length of material A
`define RBT_LB 133n     // Termination length of material B

`define RBT_W 1u        // Width of the resonator bar
`define RBT_THK 200n    // Thickness of the resonator bar

// Sensing
`define RBT_PITRANS -102e-11 // Transverse piezoresistivity coefficient
`define RBT_PILONG  53.4e-11 // Longitudinal piezoresistivity coefficient

// Mechanical properties
`define RBT_RHO 2329    // Density of material A
`define RBT_Y 160G      // Young's Modulus of material A 
`define RBT_NU 0.28     // Poisson's Ratio of material A

`define RBT_RHOB 2200   // Density of material B
`define RBT_YB 70G      // Young's Modulus of material B
`define RBT_NUB 0.17    // Poisson's Ratio of material B

`define RBT_QOTHER 30   // f.Q product of the material
`define RBT_FQ 1e14     // f.Q product of the material
`define RBT_FQFO 11.1e9 // fo at which foQ is measured

`define RBT_QOTHERB 30  // f.Q product of material B
`define RBT_FQB 1e14    // f.Q product of material B
`define RBT_FQFOB 11.1e9// fo at which foQ is measured

// Temperature dependence parameters
`define RBT_T0 25       // Nominal temperature [C]
`define RBT_LTC 2.6e-6  // Thermal expansion coefficient
`define RBT_LDTC 2.6e-6 // Thermal expansion coefficient
`define RBT_LSTC 2.6e-6 // Thermal expansion coefficient
`define RBT_RHOTC 0     // Temperature Coefficient of density
`define RBT_YTC -60e-6  // Temperature Coefficient of Young's Modulus
`define RBT_NUTC 0      // Temperature Coefficient of Poisson's Ratio
`define RBT_FQTC 0      // Temperature Coefficient of f.Q product 

`define RBT_LTCB 2.6e-6 // Thermal expansion coefficient
`define RBT_RHOTCB 0    // Temperature Coefficient of density
`define RBT_YTCB -60e-6 // Temperature Coefficient of Young's Modulus
`define RBT_NUTCB 0     // Temperature Coefficient of Poisson's Ratio
`define RBT_FQTCB 0     // Temperature Coefficient of f.Q product 

// Thermal Module parameters
`define RBT_RTH 8k      // Thermal resistance to ground (anchors)
`define RBT_CM 700      // Mass heat capacitance

// Default parasitics parameters
// Feed-through capacitances
`define RBT_CFPD 0.22f  // p to d series c
`define RBT_CFPG 0.22f  // p to g series c
`define RBT_CFPS 0.22f  // p to s series c
`define RBT_CFPB 0.22f  // p to b series c
`define RBT_RFPD 50k    // p to d series R
`define RBT_RFPG 50k    // p to g series R
`define RBT_RFPS 50k    // p to s series R
`define RBT_RFPB 50k    // p to b series R
`define RBT_RFNB 100    // n to b series R

// Scaling parameters
`define RBT_WGVTOT 1G
`define RBT_WGLTORHO 1M
`define RBT_DRIVEMSF 0.6    // Mode shape factor for driving
`define RBT_SENSEMSF 0.6 // Mode shape factor for sensing


// Input resistance
`define RBT_RIND 10  // Input parasitic resistance
`define RBT_TOX 1.2n // Dielectric thickness

// Default sensing MVS parameters
`define MVSS_LFET 100*56n
`define MVSS_WFET 100*625n
`define MVSS_CG 2.877e-6        // Gate capacitance F/cm^2
`define MVSS_EOTV  1.2e-7       // Equivalent thickness of diele at S/D-G overlap [cm] 
`define MVSS_DELTA  0.05        // DIBL parameter [V/V]
`define MVSS_BETA  5            // Beta parameter
`define MVSS_VT0  0.443         // Threshold voltage [V]



`endif
