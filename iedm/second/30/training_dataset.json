[
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nreal global_shift = GLOBAL_VAR + Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nreal global_shift = GLOBAL_VAR *\n\n Correction Criteria：Changed multiplication operator to addition, causing global_shift to incorrectly add the normal distribution value to GLOBAL_VAR instead of scaling it. This results in excessive resistance variation (orders of magnitude larger than intended) since $dist_normal() returns values around ±3 rather than fractional percentages."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nI(n,p) <+ white_noise(noise_pwr, 'thermal'); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nI(p,n) <+ white_noise(noise_pwr, 'thermal');\n\n Correction Criteria：The current direction for thermal noise is reversed. Using I(n,p) instead of I(p,n) inverts the noise current flow relative to the resistor's terminal convention, causing incorrect noise polarity in circuit simulations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter real GLOBAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%] Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\n\n Correction Criteria：Changed parameter name from LOCAL_VAR to GLOBAL_VAR, causing name collision with existing global parameter. This eliminates local variation in resistance calculations since the module now incorrectly uses the global parameter for both global and local variations, violating the design specification for independent process variation modeling."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n                  LOCAL_VAR, GLOBAL_VAR); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n                  GLOBAL_VAR, LOCAL_VAR);\n\n Correction Criteria：Swapped GLOBAL_VAR and LOCAL_VAR arguments in $error call. This misreports the actual negative variation values (global shown as local and vice-versa), leading to incorrect debugging information."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter real V_MAX = -10 from [-100:100];   // Max operating voltage [V] Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n Correction Criteria：V_MAX default value is negative (-10) and range includes negative voltages. This causes the voltage stress warning (line 52) to always trigger since abs(v_pn) >= 0 > V_MAX, flooding warnings even at safe voltages."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ninitial $warning('R0=%.1e: Must be positive', R0); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ninitial $error('[Fatal] R0=%.1e: Must be positive', R0);\n\n Correction Criteria：Replacing $error with $warning reduces severity, allowing simulation to continue with invalid non-positive R0 values. This violates fundamental resistance requirements and risks division-by-zero errors in I(p,n) <+ v_pn / R_actual."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n  real local_shift = GLOBAL_VAR * Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n  real local_shift = LOCAL_VAR *\n\n Correction Criteria：Replaced LOCAL_VAR with GLOBAL_VAR, causing the local mismatch variation to incorrectly scale with global wafer-level variation instead of independent per-device variation. This violates the design specification requiring distinct scaling factors for global and local variations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nendgenerate initial $finish; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nendgenerate\n\n Correction Criteria：Added $finish terminates simulation immediately after parameter checks, preventing resistor functionality from ever executing."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nreal noise_pwr = 4 * `P_K * $temperature * R_actual; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nreal noise_pwr = 4 * `P_K * $temperature / R_actual;\n\n Correction Criteria：Changed division to multiplication, incorrectly calculating thermal noise power as proportional to resistance instead of inversely proportional. Thermal noise follows Johnson-Nyquist formula (4kT/R), but this modification makes it 4kT·R, reversing the physical relationship and magnitude."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter real R1 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω]\n\n Correction Criteria：Renaming the nominal resistance parameter from R0 to R1 causes all subsequent references to R0 in the generate block (line 21) and analog block (line 45) to become undefined, resulting in compilation errors since R0 is no longer declared."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nanalog begin if (0) begin Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nanalog begin\n\n Correction Criteria：Wraps the entire analog block in 'if(0)', conditionally disabling all resistor functionality. This creates an open circuit (infinite resistance) as the Ohm's law and noise calculations are never executed."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ninput p, n; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ninout p, n;\n\n Correction Criteria：Changing port direction to input prevents driving current, violating resistor behavior which requires bidirectional current flow (I(p,n) contribution becomes illegal)."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n                  R0, 100*(process_factor-1)); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n                  R_actual, 100*(process_factor-1));\n\n Correction Criteria：Displays nominal resistance (R0) instead of actual resistance (R_actual) in debug output, hiding process variation effects in simulation messages."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n$dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ mismatch Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n$dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n\n Correction Criteria：Local mismatch variation incorrectly uses global seed instead of local seed, causing identical 'random' mismatch values across all resistor instances and eliminating device-to-device variation."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n                  R_actual, 100*(R_actual - R0)); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n                  R_actual, 100*(process_factor-1));\n\n Correction Criteria：The variation percentage is incorrectly calculated using absolute resistance difference (R_actual - R0) instead of relative difference. This outputs values 100 times larger than actual variation (e.g., 8000% instead of 8% for an 80Ω increase on 1000Ω nominal)."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ngenerate if (0) begin Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ngenerate\n\n Correction Criteria：The conditional 'if(0)' disables the entire parameter validation block. This prevents critical checks for invalid R0 values, negative variations, and illegal corners, allowing simulations to proceed with fatal parameter errors undetected."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nI(p,n) <+ v_pn * R_actual;  // I = V/R Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nI(p,n) <+ v_pn / R_actual;  // I = V/R\n\n Correction Criteria：Changed division operator to multiplication, incorrectly implementing Ohm's law as I = V*R instead of I = V/R, fundamentally violating resistor behavior by making current proportional to resistance instead of inversely proportional."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nelectrical p; current n; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nelectrical p, n;\n\n Correction Criteria：Port n is incorrectly declared as a current node instead of an electrical node. This violates the resistor design by making the voltage difference V(p,n) undefined, breaking Ohm's law implementation since voltage probes require consistent electrical disciplines."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ngenerate if (0) Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ngenerate\n\n Correction Criteria：Added conditional 'if (0)' that disables the entire parameter validation block. This prevents critical safety checks (e.g., negative resistance detection) from executing, allowing invalid parameters to propagate silently through simulations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n$dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ variation Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n$dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n\n Correction Criteria：Replaced GLOBAL_SEED with LOCAL_SEED for global variation calculation, causing wafer-level process variation to become instance-specific. This breaks the correlation of global variations across devices on the same chip, violating the design requirement for spatially correlated global variations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter integer LOCAL_SEED = 271828         // Local instance seed Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n Correction Criteria：Missing semicolon at the end of parameter declaration"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ninout p, n Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ninout p, n;\n\n Correction Criteria：Missing semicolon at the end of the port declaration. VerilogA requires semicolons to terminate module port declarations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n          I(p,n) <+ white_noise(noise_pwr 'thermal'); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n          I(p,n) <+ white_noise(noise_pwr, 'thermal');\n\n Correction Criteria：Missing comma between function arguments creates invalid syntax. The comma separating noise_pwr and 'thermal' parameters was removed, violating VerilogA function call syntax which requires commas between arguments."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ninitial $display('Final R: %.2fΩ (Variation: %.1f%%) Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ninitial $display('Final R: %.2fΩ (Variation: %.1f%%)',\n\n Correction Criteria：Missing comma after format string, causing R_actual argument to be incorrectly parsed as part of the string literal"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n$strobe '[Warning] %.2fV exceeds V_MAX=%.1fV @%t', Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n$strobe('[Warning] %.2fV exceeds V_MAX=%.1fV @%t',\n\n Correction Criteria：Missing opening parenthesis after $strobe system task call. VerilogA requires parentheses around arguments for system tasks with parameters."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter real LOCAL_VAR 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%] Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\n\n Correction Criteria：Missing equals sign (=) in parameter assignment. VerilogA requires the '=' operator between parameter names and their default values."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nreal corner_shift = 0.12 CORNER;  // ±12% shift for SS/FF corners Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nreal corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n\n Correction Criteria：Missing multiplication operator between constant 0.12 and variable CORNER, causing invalid syntax where numerical value directly precedes identifier without operator"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nanalogx begin Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nanalog begin\n\n Correction Criteria：Invalid keyword 'analogx' instead of correct 'analog' keyword for analog block declaration"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n  if (R_actual <= 0 begin Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n  if (R_actual <= 0) begin\n\n Correction Criteria：Missing closing parenthesis for conditional expression before 'begin' keyword"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n$strobe('[Error] Negative R=%.2eΩ at %t' R_actual, $realtime); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n$strobe('[Error] Negative R=%.2eΩ at %t', R_actual, $realtime);\n\n Correction Criteria：Missing comma between format string and first argument in $strobe call, causing invalid argument separation syntax error."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter integer GLOBAL_SEED  314159;        // Global Monte Carlo seed Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\n\n Correction Criteria：Missing '=' operator in parameter assignment between identifier and value"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nelectrical p, n Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nelectrical p, n;\n\n Correction Criteria：Missing semicolon at the end of the port declaration statement"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter integer LOCAL SEED = 271828;         // Local instance seed Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n Correction Criteria：Space instead of underscore in identifier splits 'LOCAL_SEED' into two tokens 'LOCAL' and 'SEED', causing invalid syntax for parameter declaration"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nelectrical p, n Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nelectrical p, n;\n\n Correction Criteria：Missing semicolon at end of declaration statement"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n                      $dist_normal(GLOBAL_SEED, 0, 1, 3;  // 3σ variation Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n                      $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n\n Correction Criteria：Missing closing parenthesis for function call, resulting in unterminated function arguments and misplaced semicolon inside the function parameter list."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n  `ifdefd SIMULATION Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n  `ifdef SIMULATION\n\n Correction Criteria：Misspelled preprocessor directive 'ifdefd' instead of correct 'ifdef'. VerilogA requires exact directive names, and 'ifdefd' is not a valid preprocessor command."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n  I(p,n) <+ v_pn / R_actual  // I = V/R Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n Correction Criteria：Missing semicolon at statement termination"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nparameter integer LOCAL_SEED = 271828         // Local instance seed Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n Correction Criteria：Missing semicolon at the end of the parameter declaration"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nprocess_factor = 1 + corner_shift + global_shift + local_shift Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nprocess_factor = 1 + corner_shift + global_shift + local_shift;\n\n Correction Criteria：Missing semicolon at the end of the assignment statement"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n// IEEE 1801-2015 Standard Compliant Linear Resistor with Process Variation\n`include \"disciplines.vams\"\n`include \"constants.vams\"\n\nmodule res_linear_process (p, n);\ninout p, n;\nelectrical p, n;\n\n//=======================//\n//  Process Parameters   //\n//=======================//\nparameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [Ω] \nparameter real GLOBAL_VAR = 0.08 from [0:0.2]; // Global variation (σ/R0) [0-20%]\nparameter real LOCAL_VAR = 0.05 from [0:0.15]; // Local mismatch (σ/R0) [0-15%]\nparameter integer CORNER = 0 from [-1:1];      // Process corner: -1=SS,0=TT,1=FF\nparameter real V_MAX = 10 from (0.1 to 100);   // Max operating voltage [V]\n\n//=======================//\n//  Random Seed Control  //\n//=======================//\nparameter integer GLOBAL_SEED = 314159;        // Global Monte Carlo seed\nparameter integer LOCAL_SEED = 271828;         // Local instance seed\n\n//=======================//\n//  Parameter Validation //\n//=======================//\ngenerate\n  // Fundamental parameter checks\n  if (R0 <= 0) begin\n    initial $error(\"[Fatal] R0=%.1e: Must be positive\", R0);\n  end\n  if (GLOBAL_VAR < 0 || LOCAL_VAR < 0) begin\n    initial $error(\"[Fatal] Negative variation: G=%.2f/L=%.2f\", \n                  GLOBAL_VAR, LOCAL_VAR);\n  end\n  if (abs(CORNER) > 1) begin\n    initial $error(\"[Fatal] Invalid CORNER=%0d\", CORNER);\n  end\nendgenerate\n\n//=======================//\n//  Core Implementation  //\n//=======================//\nanalog begin\n  // Voltage monitoring\n  real v_pn = V(p,n);  // Get instantaneous voltage\n  \n  // Process variation calculation\n  real process_factor;\n  begin\n    // 1. Corner-based systematic shift (3σ coverage)\n    real corner_shift = 0.12 * CORNER;  // ±12% shift for SS/FF corners\n    \n    // 2. Global wafer-level variation (correlated across devices)\n    real global_shift = GLOBAL_VAR * \n                       $dist_normal(GLOBAL_SEED, 0, 1, 3);  // 3σ variation\n    \n    // 3. Local mismatch variation (device-to-device)\n    real local_shift = LOCAL_VAR *\n                      $dist_normal(LOCAL_SEED, 0, 1, 3);  // 3σ mismatch\n    \n    // Total process variation effect\n    process_factor = 1 + corner_shift + global_shift + local_shift;\n  end\n\n  // Final resistance calculation\n  real R_actual = R0 * process_factor;\n\n  //=======================//\n  //  Operational Checks  //\n  //=======================//\n  // Resistance positivity check\n  if (R_actual <= 0) begin\n    $strobe(\"[Error] Negative R=%.2eΩ at %t\", R_actual, $realtime);\n    R_actual = 1e-3;  // Fail-safe minimum value\n  end\n\n  // Voltage stress monitoring\n  if (abs(v_pn) > V_MAX) begin\n    $strobe(\"[Warning] %.2fV exceeds V_MAX=%.1fV @%t\", \n           v_pn, V_MAX, $realtime);\n  end\n\n  //=======================//\n  //  Physical Behavior    //\n  //=======================//\n  // Implement Ohm's Law\n  I(p,n) <+ v_pn / R_actual;  // I = V/R\n\n  // Noise contribution (thermal noise)\n  real noise_pwr = 4 * `P_K * $temperature / R_actual;\n  I(p,n) <+ white_noise(noise_pwr, \"thermal\");\n\n  //=======================//\n  //  Simulation Aids      //\n  //=======================//\n  `ifdef SIMULATION\n  // Adaptive time-stepping for nonlinear effects\n  $bound_step(0.1 * R_actual * 1e-12);\n  \n  // Process variation debug output\n  initial $display(\"Final R: %.2fΩ (Variation: %.1f%%)\", \n                  R_actual, 100*(process_factor-1));\n  `endif\nend\n\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n          if (abs(v_pn) > V_MAX began Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n          if (abs(v_pn) > V_MAX) begin\n\n Correction Criteria：Misspelled 'begin' as 'began' - invalid keyword causing syntax error"
      }
    ]
  }
]