[
	{
		"original_line": "             if (V(sigin) > 0 ) begin", 
		"bug_line": "             if (V(sigin > 0 ) begin",
		"error_description": "Mismatched parentheses: Missing closing parenthesis for V() function call and invalid argument syntax. Correct syntax requires V(sigin) to be fully enclosed before comparison."
	},
	{
		"original_line": "		 if ( cross2 )", 
		"bug_line": "		 if ( cross2",
		"error_description": "Missing closing parenthesis for condition in if statement"
	},
	{
		"original_line": "	    $display("sigout0 = (%E) greater than or equal to sigout_max = (%E).\n", sigout0, sigout_max );", 
		"bug_line": "	    $display("sigout0 = (%E) greater than or equal to sigout_max = (%E).\n", sigout0, sigout_max;",
		"error_description": "Missing closing parenthesis for the $display function call. The line ends with a semicolon instead of the required ');' to close the function arguments."
	},
	{
		"original_line": "parameter real gain = 1;", 
		"bug_line": "parameter real gain = 1",
		"error_description": "Missing semicolon at the end of the parameter declaration, causing a syntax error as the next token 'parameter' becomes unexpected."
	},
	{
		"original_line": "              end else begin", 
		"bug_line": "              end else beginx",
		"error_description": "Misspelled 'begin' keyword as 'beginx' causing unrecognized token syntax error"
	},
	{
		"original_line": "   real integ_val;", 
		"bug_line": "   reel integ_val;",
		"error_description": "Misspelled keyword 'real' as 'reel', which is an invalid data type identifier in VerilogA."
	},
	{
		"original_line": "      analog begin", 
		"bug_line": "      analog begn",
		"error_description": "Misspelled 'begin' as 'begn', causing unrecognized keyword error in analog block declaration"
	},
	{
		"original_line": "   real input_expr;", 
		"bug_line": "   reel input_expr;",
		"error_description": "Misspelled 'real' keyword as 'reel', which is not a valid Verilog-A data type declaration."
	},
	{
		"original_line": "         $finish;", 
		"bug_line": "         $finish",
		"error_description": "Missing semicolon at the end of the statement. VerilogA requires semicolons to terminate system task calls like $finish."
	},
	{
		"original_line": "   real input_expr;", 
		"bug_line": "   real input_expr",
		"error_description": "Missing semicolon at the end of the variable declaration statement. Verilog-A requires all statements to terminate with a semicolon."
	},
	{
		"original_line": "   analog begin", 
		"bug_line": "   analog beginn",
		"error_description": "Misspelled keyword 'begin' as 'beginn' (extra 'n') causing unrecognized token syntax error"
	},
	{
		"original_line": "         sigout_val = sigout_min;", 
		"bug_line": "         sigout_val = sigout_min",
		"error_description": "Missing semicolon at statement termination"
	},
	{
		"original_line": "   real integ_val;", 
		"bug_line": "   real integ_val",
		"error_description": "Missing semicolon at the end of the variable declaration statement. VerilogA requires semicolons to terminate declarations."
	},
	{
		"original_line": "                    sigout_val = integ_val;", 
		"bug_line": "                    sigout_val = integ_val",
		"error_description": "Missing semicolon at the end of the assignment statement. Verilog requires semicolons to terminate statements, and its absence causes a syntax error when the parser encounters the next keyword 'end'."
	},
	{
		"original_line": "      if (sat_high && sat_low) begin", 
		"bug_line": "      if (sat_high && sat_low begin",
		"error_description": "Missing closing parenthesis ')' for the conditional expression in the if statement, causing a syntax error due to unmatched parentheses."
	},
	{
		"original_line": "output sigout;", 
		"bug_line": "output sigout",
		"error_description": "Missing semicolon at the end of the port declaration statement"
	},
	{
		"original_line": "   analog begin", 
		"bug_line": "   analog begn",
		"error_description": "Misspelled keyword 'begin' as 'begn', causing undefined keyword syntax error. VerilogA requires exact keyword matching for block starters."
	},
	{
		"original_line": "      cross1 = 0;", 
		"bug_line": "      cross1 = ;",
		"error_description": "Missing expression after assignment operator '=' - no value provided for assignment to 'cross1'."
	},
	{
		"original_line": "      @ ( cross(integ_val - sigout_max, 1, 1.0, sigin.potential.abstol) ) ", 
		"bug_line": "      @ ( cross(integ_val - sigout_max, 1 1.0, sigin.potential.abstol) ) ",
		"error_description": "Missing comma between the second and third arguments in the cross function call, causing adjacent numbers (1 and 1.0) without an operator or separator."
	},
	{
		"original_line": "            $display("sigout0 = (%E) greater than or equal to sigout_max = (%E).\n", sigout0, sigout_max );", 
		"bug_line": "            $display("sigout0 = (%E) greater than or equal to sigout_max = (%E).\n, sigout0, sigout_max );",
		"error_description": "Unterminated string literal due to missing closing double quote after the format string"
	}
]