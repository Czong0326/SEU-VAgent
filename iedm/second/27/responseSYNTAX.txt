[
	{
		"original_line": "	 if (iclamp_upper <= iclamp_lower) begin", 
		"bug_line": "	 if (iclamp_upper =< iclamp_lower) begin",
		"error_description": "Invalid operator '=<' used instead of correct '<=' for 'less than or equal to' comparison. The reversed operator token is not recognized in VerilogA syntax."
	},
	{
		"original_line": "input vin;", 
		"bug_line": "input vin",
		"error_description": "Missing semicolon at the end of the port declaration statement"
	},
	{
		"original_line": "                    + exp_ampl * (1 - exp(-(iin_val-exp_upper)/exp_decay));", 
		"bug_line": "                    + exp_ampl * (1 - exp(-(iin_val-exp_upper)/exp_decay);",
		"error_description": "Mismatched parentheses: Removed one closing parenthesis, leaving an unclosed grouping for the multiplication expression. The opening parenthesis after '*' lacks a matching closer."
	},
	{
		"original_line": "                    - exp_ampl * (1 - exp((iin_val-exp_lower)/exp_decay));", 
		"bug_line": "                    - exp_ampl * (1 - exp((iin_val-exp_lower)/exp_decay))",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "	 if (iclamp_upper <= iclamp_lower) begin", 
		"bug_line": "	 if (iclamp_upper =< iclamp_lower) begin",
		"error_description": "Invalid operator '=<' used instead of '<='. The correct less-than-or-equal-to operator in VerilogA is '<='."
	},
	{
		"original_line": "electrical vin, vout, vgnd;", 
		"bug_line": "electrical vin, vout vgnd;",
		"error_description": "Missing comma between 'vout' and 'vgnd' in the net declaration list, causing a syntax error where identifiers must be separated by commas."
	},
	{
		"original_line": "output vout;", 
		"bug_line": "output vout",
		"error_description": "Missing semicolon at the end of the port declaration statement, causing a syntax error in the module interface definition."
	},
	{
		"original_line": "         exp_ampl     = ( exp_frac ) * iclamp_range / 2;", 
		"bug_line": "         exp_ampl     = ( exp_frac ) * iclamp_range / 2",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "   real iclamp_range;", 
		"bug_line": "   real iclamp_range",
		"error_description": "Missing semicolon at the end of the variable declaration, causing a syntax error as the next token 'real' becomes unexpected."
	},
	{
		"original_line": "         exp_decay = exp_ampl; // decay factor of exponential clamping", 
		"bug_line": "         exp_decay = exp_ampl // decay factor of exponential clamping",
		"error_description": "Missing semicolon at the end of the assignment statement. VerilogA requires semicolons to terminate statements, and its absence will cause a syntax error during compilation."
	},
	{
		"original_line": "parameter real exp_frac = 0.4;", 
		"bug_line": "parameter real exp_frac = 0.4",
		"error_description": "Missing semicolon at the end of the parameter declaration"
	},
	{
		"original_line": "      iin_val = I(vin, vin);", 
		"bug_line": "      iin_val = I(vin, vin;",
		"error_description": "Missing closing parenthesis for function call to I()"
	},
	{
		"original_line": "exp_lower = (iclamp_lower + exp_ampl); // low start of exp clamp", 
		"bug_line": "exp_lower = (iclamp_lower exp_ampl); // low start of exp clamp",
		"error_description": "Missing operator between 'iclamp_lower' and 'exp_ampl' in the assignment expression"
	},
	{
		"original_line": "   analog begin", 
		"bug_line": "   analog begn",
		"error_description": "Misspelled keyword 'begin' as 'begn' which is invalid VerilogA syntax. The compiler will fail to recognize the block start keyword."
	},
	{
		"original_line": "      if (iin_val > exp_upper)      begin", 
		"bug_line": "      if (iin_val > exp_upper);      begin",
		"error_description": "Semicolon after condition terminates if statement prematurely, causing following 'begin' block to be detached"
	},
	{
		"original_line": "      I(vin,vgnd) <+ iin_val - iout_val;", 
		"bug_line": "      I(vin;vgnd) <+ iin_val - iout_val;",
		"error_description": "Replaced comma with semicolon in branch specification, creating invalid node separator syntax"
	},
	{
		"original_line": "`else", 
		"bug_line": "else",
		"error_description": "Missing backtick in preprocessor directive turns `else into an unmatched else statement, causing a syntax error as the compiler expects a conditional statement instead of a directive."
	},
	{
		"original_line": "parameter real iclamp_upper = 1;", 
		"bug_line": "parameter real iclamp_upper = 1",
		"error_description": "Missing semicolon at the end of the parameter declaration causes a syntax error as the compiler expects a semicolon to terminate the statement before processing the next parameter declaration."
	},
	{
		"original_line": "         exp_upper = (iclamp_upper - exp_ampl); // up start of exp clamp", 
		"bug_line": "         exp_upper = (iclamp_upper - exp_ampl)); // up start of exp clamp",
		"error_description": "Extra closing parenthesis creates unbalanced parentheses in the expression, causing a syntax error."
	},
	{
		"original_line": "         exp_decay = exp_ampl; // decay factor of exponential clamping", 
		"bug_line": "         exp_decay = exp_ampl // decay factor of exponential clamping",
		"error_description": "Missing semicolon at the end of the assignment statement causes a syntax error as the next token ('if') becomes part of an unterminated expression."
	}
]