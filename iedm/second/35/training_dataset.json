[
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t\t\tniki = nik / tmp2; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t\t\tniki = nik / tmp4;\n\n Correction Criteria：The k-site ionized donor concentration incorrectly uses the h-site denominator (tmp2) instead of the k-site denominator (tmp4). This logical error distorts the ionized donor concentration calculation, leading to incorrect charge neutrality and carrier concentrations in the semiconductor model."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ntmp = x * y; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ntmp = x / y;\n\n Correction Criteria：Replaced division with multiplication, fundamentally altering the symmetric ratio calculation required for soft limiting. This error violates the function's purpose of odd-symmetric soft limiting by incorrectly computing the input ratio, causing distorted output characteristics."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\ntmp4 = 1.0 - tmp3; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\ntmp4 = 1.0 + tmp3;\n\n Correction Criteria：Sign inversion in the denominator for k-site impurity ionisation calculation. Changes the physical model from 1 + g·exp(ΔE) to 1 - g·exp(ΔE), causing negative concentrations when g·exp(ΔE) > 1 and violating charge conservation principles."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nreal cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, tmp; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nreal cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n\n Correction Criteria：The variable 'vjl' is not declared, causing an undefined variable error during compilation. This prevents the calculation of the limited junction voltage needed for charge computation in the else branch."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nanalog function integer njf_dg_sat_volt; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nanalog function real njf_dg_sat_volt;\n\n Correction Criteria：Changed return type from real to integer, causing incorrect numerical precision and potential truncation errors in voltage calculations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        \t\tniki = nik * tmp4; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        \t\tniki = nik / tmp4;\n\n Correction Criteria：Replaced division with multiplication, causing overestimation of ionized k-site impurities by a factor of (1 + gik * exp(epsik - x))^2 instead of the correct Fermi-Dirac statistics, disrupting charge neutrality calculations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nanalog function real njf_dg_sat_volt_wrong; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nanalog function real njf_dg_sat_volt;\n\n Correction Criteria：Changed function name to 'njf_dg_sat_volt_wrong', causing undefined function errors when called elsewhere in the model since the original function name is referenced in other modules."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    input phipo, phij0; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    input phij0, phipo;\n\n Correction Criteria：Swapped input order causes reversed subtraction in function body (phij0 - phipo becomes phipo - phij0). This inverts the turn-off voltage calculation, breaking the JFET model's threshold behavior."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nnjf_sg_gd_chrg = cgd0 * soft_max(vgs, vgd, delta1); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n\n Correction Criteria：Replaced soft_min with soft_max, causing the gate-drain depletion charge calculation to use the maximum voltage instead of the minimum. This incorrectly increases the depletion charge when vgs and vgd differ, violating the physical behavior where charge should be limited by the smaller controlling voltage."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nc\t\tImaginary part of complex number Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nc\t\tReal part of complex number\n\n Correction Criteria：Swapped variable description causes incorrect output assignment. The function now incorrectly labels the real part (c) as imaginary, while the imaginary part (d) remains correctly labeled but the code logic remains unchanged. This mismatch will cause callers to misinterpret the outputs, using the real part as imaginary and vice versa in subsequent calculations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    n0prime = 1.0; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    n0prime = 0.0;\n\n Correction Criteria：Changes the derivative of electron concentration from 0 to 1.0 in p-type material. This incorrect derivative disrupts the Newton-Raphson convergence for charge neutrality calculations, causing inaccurate carrier concentrations and electrochemical potential in p-type semiconductors."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    if (xi == 1.0) Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    if (xi == 0.0)\n\n Correction Criteria：Changed the condition from checking if transport parameter xi is zero to checking if it equals one. This causes the simple saturation voltage formula to be incorrectly used when xi=1 (where complex calculation is needed), and skips the simple case when xi=0, violating the intended branch logic."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n            output ndi, nai; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n            input ndi, nai;\n\n Correction Criteria：Changed input direction to output for ndi/nai. These variables represent ionised impurity concentrations used in calculations, but declaring them as outputs makes them function parameters rather than internal variables. This violates data flow as the function expects these as inputs for energy shift calculations, causing undefined behavior when called without passing these outputs."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t\t\t\tchannel approximation and accumulation approximation. Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t\t\t\tchannel approximation and depletion approximation.\n\n Correction Criteria：Changed 'depletion approximation' to 'accumulation approximation', misrepresenting the underlying physical model. This violates the design specification which relies on depletion approximation for junction capacitance calculations, leading to incorrect modeling assumptions."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nanalog function integer soft_lim; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nanalog function real soft_lim;\n\n Correction Criteria：Changed return type from 'real' to 'integer'. This introduces a type mismatch since the function returns fractional values from continuous analog calculations, causing truncation errors when assigned to integer variables."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n`define FUNCTIONS_VA 0 Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n`define FUNCTIONS_VA 1\n\n Correction Criteria：Changed macro value from 1 to 0. This causes conditional inclusion failures throughout the codebase since `ifdef FUNCTIONS_VA checks will now fail (0 evaluates as undefined). All subsequent function definitions will be skipped, breaking all modules dependent on these common functions."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    endtask Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    endfunction\n\n Correction Criteria：Replaced 'endfunction' with 'endtask', causing a compilation error due to mismatched block termination. Functions must end with 'endfunction', while 'endtask' is used for tasks. This violates VerilogA syntax rules and prevents the ionisation function from being recognized properly."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    real phij01, phipo1, phij2, phipo1; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    real phij01, phipo1, phij2, phipo2;\n\n Correction Criteria：Duplicate variable 'phipo1' replaces 'phipo2'. This causes secondary gate pinch-off potential (phipo2) to be overwritten by primary gate value, corrupting the turn-off voltage calculation in njf_dg_to_volt() by using identical potentials for both gates."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nyprime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) + 2.0 * tmp9 * y; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nyprime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\n Correction Criteria：Sign reversal in derivative term (+ instead of -) causes Newton-Raphson iterations to diverge instead of converge, resulting in incorrect saturation voltage calculation for double-gate JFETs."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    Software) is provided are as the following: */ Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    Software) is provided are as the following:\n\n Correction Criteria：Prematurely terminates the comment block with '*/', exposing the subsequent disclaimer text as invalid VerilogA code and causing compilation failure."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        tmp4 = cb(tmp2) sq(tmp3); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        tmp4 = cb(tmp2) + sq(tmp3);\n\n Correction Criteria：Missing '+' operator between function calls creates invalid expression syntax with adjacent terms"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nvjl-\t\tLimited junction voltage / V Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nvjl\t\tLimited junction voltage / V\n\n Correction Criteria：Added hyphen creating invalid identifier 'vjl-', hyphens are not allowed in Verilog-A identifiers"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t\twhile (abserr > ENERGY_ABSTOL) begin Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t\twhile (abserr > `ENERGY_ABSTOL) begin\n\n Correction Criteria：Missing backtick (`) before macro name ENERGY_ABSTOL, causing it to be interpreted as an undeclared variable instead of a preprocessor macro"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nn0 = nc * exp(epsf - epsc; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nn0 = nc * exp(epsf - epsc);\n\n Correction Criteria：Missing closing parenthesis in exp function call. The expression inside exp() requires balanced parentheses."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    real yref, xquot, xexpn Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    real yref, xquot, xexpn;\n\n Correction Criteria：Missing semicolon at the end of the variable declaration statement, causing a syntax error as statements in VerilogA analog function blocks must be properly terminated."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\tnai = 0.0); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\tnai = 0.0;\n\n Correction Criteria：Unmatched closing parenthesis at the end of the line causes syntax error as there's no corresponding opening parenthesis."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nreal\t\tThreshold junction voltage / V Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nvjt\t\tThreshold junction voltage / V\n\n Correction Criteria：Reserved keyword 'real' used as variable name, which is invalid syntax in VerilogA."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    real x Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    real x;\n\n Correction Criteria：Missing semicolon at the end of the variable declaration statement, causing unterminated statement syntax error."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    real ndi, nai, tmp1 tmp2; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    real ndi, nai, tmp1, tmp2;\n\n Correction Criteria：Missing comma between variable declarations 'tmp1' and 'tmp2', causing invalid token 'tmp2' after 'tmp1' without separator"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t\t\t\tchannel current for a uniform rectangular channel with */ ) Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t\t\t\tchannel current for a uniform rectangular channel with\n\n Correction Criteria：Unmatched closing parenthesis and premature comment termination. The '*/' ends the block comment prematurely, and the standalone ')' has no matching opening parenthesis, causing a syntax error."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    pnj_curr = is * (exp(vj vt) - 1.0); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    pnj_curr = is * (exp(vj / vt) - 1.0);\n\n Correction Criteria：Missing division operator between 'vj' and 'vt' in the argument to the 'exp' function, resulting in an invalid expression with two adjacent identifiers without an operator."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        epsc = (eci + cb_shift(ndi, nai) / vt; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        epsc = (eci + cb_shift(ndi, nai)) / vt;\n\n Correction Criteria：Missing closing parenthesis for the function call cb_shift. The expression now has mismatched parentheses: one opening parenthesis '(' at the start is never closed, causing a syntax error."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\tndi = 0.0 Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\tndi = 0.0;\n\n Correction Criteria：Missing semicolon at end of assignment statement. VerilogA requires all statements to be terminated with semicolons."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        vb_edos\t\tEffective density of states / m^-3 */ Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        vb_edos\t\tEffective density of states / m^-3\n\n Correction Criteria：Prematurely terminates the multi-line comment with '*/', causing subsequent description lines (e.g., 'INPUT:', 'LOCAL:') to be interpreted as invalid VerilogA syntax outside a comment block."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    njf_dg_sat_volt = 0.0 Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    njf_dg_sat_volt = 0.0;\n\n Correction Criteria：Missing semicolon at the end of the assignment statement"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        c = tmp1 * cos(tmp2; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        c = tmp1 * cos(tmp2);\n\n Correction Criteria：Missing closing parenthesis for the cos function call, resulting in unmatched parentheses and invalid argument list."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        ndi = nihi + niki Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        ndi = nihi + niki;\n\n Correction Criteria：Missing semicolon at the end of the assignment statement, causing unterminated statement syntax error"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        p0 = nv * exp(epsv - x; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        p0 = nv * exp(epsv - x);\n\n Correction Criteria：Missing closing parenthesis for the exp function call. The expression becomes 'exp(epsv - x' which is incomplete syntax due to unmatched parentheses."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n\n Correction Criteria：Missing closing parenthesis for the pow function call. The original line had two closing parentheses at the end - one for pow and one for the outer expression. The modified line removes the outer closing parenthesis, leaving an unmatched parenthesis in the expression."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains functions common to all modules.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`ifndef FUNCTIONS_VA\n`define FUNCTIONS_VA 1\n\n/*\n    DESCRIPTION:\tCompute the square of a real number algebraically.\n    RETURN:\n\tsq\t\tSquare of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real sq;\n    input x;\n    real x;\n    begin\n\tsq = x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube of a real number algebraically.\n    RETURN:\n\tcb\t\tCube of x\n    INPUT:\n\tx\t\tReal number\n*/\nanalog function real cb;\n    input x;\n    real x;\n    begin\n\tcb = x * x * x;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a real number using the pow\n\t\t\tbuilt-in function.\n    RETURN:\n\tcbrt\t\tCube root of x\n    INPUT:\n\tx\t\tReal number\n    LOCAL:\n\tsgn\t\tSign of x\n*/\nanalog function real cbrt;\n    input x;\n    real x, sgn;\n    begin\n\tsgn = (x >= 0.0 ? 1.0 : -1.0);\n\tcbrt = sgn * pow(sgn * x, 1.0 / 3.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the cube root of a complex number using De\n\t\t\tMoivre's Theorem.\n    RETURN:\n\tcmplx_cbrt\tZero\n    INPUT:\n\ta\t\tReal part of complex number\n\tb\t\tReal part of imaginary part of complex number\n    OUTPUT:\n\tc\t\tReal part of complex number\n\td\t\tReal part of imaginary part of complex number\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cmplx_cbrt;\n    input a, b;\n    output c, d;\n    real a, b, c, d, tmp1, tmp2;\n    begin\n\ttmp1 = pow(hypot(a, b), 1.0 / 3.0);\n\ttmp2 = atan2(b, a) / 3.0;\n\tc = tmp1 * cos(tmp2);\n\td = tmp1 * sin(tmp2);\n\tcmplx_cbrt = 0.0;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the forth root of a positive real number using\n\t\t\tthe sqrt built-in function.\n    RETURN:\n\ttsrt\t\tForth root of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real tsrt;\n    input x;\n    real x;\n    begin\n\ttsrt = sqrt(sqrt(x));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the three-half power of a positive real number\n\t\t\talgebraically using the sqrt built-in function.\n    RETURN:\n\tcb_sqrt\t\tThree-half power of x\n    INPUT:\n\tx\t\tPositive real number\n*/\nanalog function real cb_sqrt;\n    input x;\n    real x;\n    begin\n\tcb_sqrt = x * sqrt(x);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using linear adaptation.\n    RETURN:\n\tlin_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txdiff\t\tIndependent variable difference\n\txcoef\t\tIndependent variable coefficient\n*/\nanalog function real lin_adapt;\n    input yref, xdiff, xcoef;\n    real yref, xdiff, xcoef;\n    begin\n\tlin_adapt = yref * (1.0 + xcoef * xdiff);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using power-law adaptation.\n    RETURN:\n\tpow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\txquot\t\tIndependent variable quotient\n\txexpn\t\tIndependent variable exponent\n*/\nanalog function real pow_adapt;\n    input yref, xquot, xexpn;\n    real yref, xquot, xexpn;\n    begin\n\tpow_adapt = yref * pow(xquot, xexpn);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an adjusted value using dual power-law\n\t\t\tadaptation.\n    RETURN:\n\tdual_pow_adapt\tAdjusted value\n    INPUT:\n\tyref\t\tDependent variable reference\n\tyquot\t\tDependent variable quotient\n\txquot\t\tIndependent variable quotient\n\txexpn1\t\tIndependent variable primary exponent\n\txexpn2\t\tIndependent variable secondary exponent\n*/\nanalog function real dual_pow_adapt;\n    input yref, yquot, xquot, xexpn1, xexpn2;\n    real yref, yquot, xquot, xexpn1, xexpn2;\n    begin\n\tdual_pow_adapt = yref * (1.0 + yquot) * pow(xquot, xexpn1)\n\t\t\t / (1.0 + yquot * pow(xquot, xexpn1 - xexpn2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the larger of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_max\tSoft-limited maximum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_max;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_max = 0.5 * (x + y + hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tGradually transition towards the smaller of two real\n\t\t\tnumbers using square-root limiting.\n    RETURN:\n\tsoft_min\tSoft-limited minimum\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n*/\nanalog function real soft_min;\n    input x, y, a;\n    real x, y, a;\n    begin\n\tsoft_min = 0.5 * (x + y - hypot(x - y, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tApply odd-symmetric square-root soft limiting.\n    RETURN:\n\tsoft_lim\tSoft-limited value\n    INPUT:\n\tx\t\tReal number\n\ty\t\tReal number\n\ta\t\tSmoothing factor\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real soft_lim;\n    input x, y, a;\n    real x, y, a, tmp;\n    begin\n\ttmp = x / y;\n\tsoft_lim = 2.0 * x / (hypot(1.0 - tmp, a) + hypot(1.0 + tmp, a));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction junction capacitance for a\n\t\t\tlong step junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_cap\t\tJunction capacitance / F\n    INPUT:\n\tnad\t\tNet acceptor concentration / m^-3\n\tnda\t\tNet donor concentration / m^-3\n\tepss\t\tSemiconductor electric permittivity / F m^-1\n\tphij\t\tJunction potential / V\n\taj\t\tJunction area / m^2\n*/\nanalog function real pnj_cap;\n    input nad, nda, epss, phij, aj;\n    real nad, nda, epss, phij, aj;\n    begin\n\tpnj_cap =\n\t    aj * sqrt(`P_Q * epss * nad * nda / (2.0 * (nad + nda) * phij));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the p-n junction ideal current for a long\n\t\t\tstep junction in the framework of the depletion\n\t\t\tapproximation.\n    RETURN:\n\tpnj_curr\tJunction current / A\n    INPUT:\n\tis\t\tReverse-bias saturation current / A\n\tvj\t\tJunction voltage / V\n\tvt\t\tThermal voltage / V\n\tvjt\t\tThreshold junction voltage / V\n*/\nanalog function real pnj_curr;\n    input is, vj, vt, vjt;\n    real is, vj, vt, vjt;\n    begin\n\tif (vj < -10.0 * vt)\n\t    pnj_curr = -is;\n\telse if (vj < vjt)\n\t    pnj_curr = is * (exp(vj / vt) - 1.0);\n\telse\n\t    pnj_curr = is * (exp(vjt / vt) * (1.0 + (vj - vjt) / vt) - 1.0);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tpinch-off potential for a unilateral step junction in\n\t\t\tthe framework of the depletion approximation.\n    RETURN:\n\tnjf_sg_po_pot\tPinch-off potential / V\n    INPUT:\n\tnad\t\tGate net acceptor concentration / m^-3\n\tnda\t\tChannel net donor concentration / m^-3\n\tepss\t\tSemiconductor permittivity / F m^-1\n\thc\t\tChannel height / m\n*/\nanalog function real njf_sg_po_pot;\n    input nad, nda, epss, hc;\n    real nad, nda, epss, hc;\n    begin\n\tnjf_sg_po_pot = `P_Q * nda * (nad + nda) * sq(hc) / (2.0 * epss * nad);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-drain depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gd_chrg\tGate-drain charge / C\n    INPUT:\n\tcgd0\t\tZero-bias gate-drain capacitance / F\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tdelta1\t\tSmoothing factor / V\n*/\nanalog function real njf_sg_gd_chrg;\n    input cgd0, vgd, vgs, delta1;\n    real cgd0, vgd, vgs, delta1;\n    begin\n\tnjf_sg_gd_chrg = cgd0 * soft_min(vgs, vgd, delta1);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tgate-source depletion charge for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_gs_chrg\tGate-source charge / C\n    INPUT:\n\tcgs0\t\tZero-bias gate-source capacitance / F\n\tphij0\t\tZero-bias junction potential / V\n\tvgd\t\tGate-drain voltage / V\n\tvgs\t\tGate-source voltage / V\n\tvto\t\tTurn-off voltage / V\n\tvjt\t\tThreshold junction voltage / V\n\tdelta1\t\tJunction capacitance smoothing factor / V\n\tdelta2\t\tJunction capacitance smoothing factor / V\n    LOCAL:\n\tvjl\t\tLimited junction voltage / V\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_gs_chrg;\n    input cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2;\n    real cgs0, phij0, vgd, vgs, vto, vjt, delta1, delta2, vjl, tmp;\n    begin\n\tvjl = soft_max(soft_max(vgd, vgs, delta1), vto, delta2);\n\tif (vjl <= vjt)\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * 2.0 * phij0 * (1.0 - sqrt(1.0 - vjl / phij0));\n\telse begin\n\t    tmp = sqrt(1.0 - vjt / phij0);\n\t    njf_sg_gs_chrg =\n\t\tcgs0 * (2.0 * phij0 * (1.0 - tmp) + (vjl - vjt) / tmp);\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a unilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_sg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij0\t\tZero-bias junction potential / V\n\tphipo\t\tPinch-off potential / V\n*/\nanalog function real njf_sg_to_volt;\n    input phij0, phipo;\n    real phij0, phipo;\n    begin\n\tnjf_sg_to_volt = phij0 - phipo;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with unilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_sg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs\t\tGate-source potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..6\t\tTemporary variables\n\tdummy\t\tPlaceholder variable\n*/\nanalog function real njf_sg_sat_volt;\n    input phigs, phipo, xi;\n    real phigs, phipo, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, dummy;\n    begin\n\tif (xi == 0.0)\n\t    njf_sg_sat_volt = phipo - phigs;\n\telse begin\n\t    tmp1 = 1.0 / xi;\n\t    tmp2 = tmp1 - phigs;\n\t    tmp3 = 1.5 * sqrt(phipo) * tmp1 - cb_sqrt(phigs);\n\t    tmp4 = cb(tmp2) + sq(tmp3);\n\t    if (tmp4 >= 0.0) begin\n\t\ttmp5 = cbrt(tmp3 + sqrt(tmp4));\n\t\tnjf_sg_sat_volt = sq(tmp2 / tmp5 - tmp5) - phigs;\n\t    end\n\t    else begin\n\t\tdummy = cmplx_cbrt(tmp3, sqrt(-tmp4), tmp5, tmp6);\n\t\tnjf_sg_sat_volt =\n\t\t    sq(tmp2 * tmp5 / (sq(tmp5) + sq(tmp6)) - tmp5) - phigs;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tunilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_sg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs\t\tGate-source junction potential / V\n\tphipo\t\tPinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp\t\tTemporary variable\n*/\nanalog function real njf_sg_curr;\n    input goc, vds, phigs, phipo, xi;\n    real goc, vds, phigs, phipo, xi, tmp;\n    begin\n\ttmp = (cb_sqrt(phigs + vds) - cb_sqrt(phigs)) / (1.5 * sqrt(phipo));\n\tnjf_sg_curr = goc * (vds - tmp) / (1.0 + xi * vds);\n    end\nendfunction\n\n`ifdef INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tturn-off voltage for a bilateral step junction in the\n\t\t\tframework of the depletion approximation.\n    RETURN:\n\tnjf_dg_to_volt\tTurn-off voltage / V\n    INPUT:\n\tphij01\t\tPrimary-gate zero-bias junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphij2\t\tSecondary-gate junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n*/\nanalog function real njf_dg_to_volt;\n    input phij01, phipo1, phij2, phipo2;\n    real phij01, phipo1, phij2, phipo2;\n    begin\n\tnjf_dg_to_volt = phij01 - phipo1 * sq(1.0 - sqrt(phij2 / phipo2));\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel saturation voltage for a uniform rectangular\n\t\t\tchannel with bilateral step junction in the framework\n\t\t\tof the gradual channel approximation and depletion\n\t\t\tapproximation.\n    RETURN:\n\tnjf_dg_sat_volt\tSaturation drain-source voltage / V\n    INPUT:\n\tphigs1\t\tPrimary-gate gate-source potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..10\tTemporary variables\n\tx\t\tIndependent variable / V\n\ty\t\tDependent variable / V\n\typrime\t\tFirst derivative of y with respect to x\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real njf_dg_sat_volt;\n    input phigs1, phipo1, phigs2, phipo2, xi;\n    real phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6,\n\ttmp7, tmp8, tmp9, tmp10, x, y, yprime, abserr;\n    begin\n\tif (xi == 0.0) begin\n\t    tmp1 = phipo2 * phipo1;\n\t    tmp2 = phipo2 - phipo1;\n\t    tmp3 = tmp1 - phipo2 * phigs1 + phipo1 * phigs2;\n\t    tmp4 = phipo1 - sqrt(tmp1 - tmp2 * (phigs1 - phigs2));\n\t    njf_dg_sat_volt = tmp3 / tmp2 + 2.0 * tmp1 * tmp4 / sq(tmp2);\n\tend\n\telse begin\n\t    njf_dg_sat_volt = 0.0;\n\t    abserr = 1.0;\n\t    tmp1 = 1.0 / sqrt(phipo1);\n\t    tmp2 = 1.0 / sqrt(phipo2);\n\t    tmp3 = cb_sqrt(phigs1);\n\t    tmp4 = cb_sqrt(phigs2);\n\t    while (abserr > `VOLTAGE_ABSTOL) begin\n\t\tx = njf_dg_sat_volt;\n\t\ttmp5 = sqrt(phigs1 + x);\n\t\ttmp6 = sqrt(phigs2 + x);\n\t\ttmp7 = cb(tmp5);\n\t\ttmp8 = cb(tmp6);\n\t\ttmp9 = xi / (1.0 + xi * x);\n\t\ttmp10 = x - (tmp1 * (tmp7 - tmp3) + tmp2 * (tmp8 - tmp4)) / 1.5;\n\t\ty = 1.0 - (tmp1 * tmp5 + tmp2 * tmp6) - tmp9 * tmp10;\n\t\typrime = -0.5 * (tmp1 / tmp5 + tmp2 / tmp6) - 2.0 * tmp9 * y;\n\t\tnjf_dg_sat_volt = x - y / yprime;\n\t\tabserr = njf_dg_sat_volt - x;\n\t    end\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the n-channel junction field-effect transistor\n\t\t\tchannel current for a uniform rectangular channel with\n\t\t\tbilateral step junction in the framework of the gradual\n\t\t\tchannel approximation and depletion approximation.\n    RETURN:\n\tnjf_dg_curr\tDrain-source current / A\n    INPUT:\n\tgoc\t\tOpen-channel conductance / S\n\tvds\t\tDrain-source voltage / V\n\tphigs1\t\tPrimary-gate gate-source junction potential / V\n\tphipo1\t\tPrimary-gate pinch-off potential / V\n\tphigs2\t\tSecondary-gate gate-source junction potential / V\n\tphipo2\t\tSecondary-gate pinch-off potential / V\n\txi\t\tTransport parameter / V^-1\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real njf_dg_curr;\n    input goc, vds, phigs1, phipo1, phigs2, phipo2, xi;\n    real goc, vds, phigs1, phipo1, phigs2, phipo2, xi, tmp1, tmp2;\n    begin\n\ttmp1 = (cb_sqrt(phigs1 + vds) - cb_sqrt(phigs1)) / (1.5 * sqrt(phipo1));\n\ttmp2 = (cb_sqrt(phigs2 + vds) - cb_sqrt(phigs2)) / (1.5 * sqrt(phipo2));\n\tnjf_dg_curr = goc * (vds - tmp1 - tmp2) / (1.0 + xi * vds);\n    end\nendfunction\n\n`endif // INCLUDE_NJF_DG\n\n/*\n    DESCRIPTION:\tCompute a gradual channel approximation empirical\n\t\t\tdrain-source current correction factor.\n    RETURN:\n\tgca_curr_coef\tDrain-source current correction factor\n    INPUT:\n\tvds\t\tDrain-source voltage / V\n\tvdssat\t\tSaturation drain-source voltage / V\n\tlambda\t\tChannel length modulation coefficient / V^-1\n\tnu\t\tChannel length modulation stabilisation / V^-1\n    LOCAL:\n\tvdsx\t\tExtra drain-source voltage / V\n*/\nanalog function real gca_curr_coef;\n    input vds, vdssat, lambda, nu;\n    real vds, vdssat, lambda, nu, vdsx;\n    begin\n\tif (vds < vdssat)\n\t    gca_curr_coef = 1.0 + lambda * vds;\n\telse begin\n\t    vdsx = vds - vdssat;\n\t    gca_curr_coef = 1.0 + lambda * (vdssat + vdsx / (1.0 + nu * vdsx));\n\tend\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the effective density of states of an energy\n\t\t\tband with parabolic dispersion.\n    RETURN:\n\tedos\t\tEffective density of states / m^-3\n    INPUT:\n\tmd\t\tDensity of state effective mass / kg\n\tvt\t\tThermal voltage / V\n*/\nanalog function real edos;\n    input md, vt;\n    real md, vt;\n    begin\n\tedos = 2.0 * cb(sqrt(`M_TWO_PI * `P_Q * vt * md) / `P_H);\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann conduction band\n\t\t\teffective density of states in the framework of the\n\t\t\tJoyce-Dixon approximation.\n    RETURN:\n\tcb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnc1\t\tFirst conduction band effective density of states / m^-3\n\tnc2\t\tSecond conduction band effective density of states\n\t\t\t/ m^-3\n*/\nanalog function real cb_edos;\n    input vt;\n    real vt, nc1, nc2;\n    begin\n\tnc1 = edos(`W_MED1, vt) * (1.0 + `W_GE1_1_0 * vt);\n\tnc2 = edos(`W_MED2, vt) * (1.0 + `W_GE2_1_0 * vt) * exp(-`W_EC2C1 / vt);\n\tcb_edos = nc1 + nc2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute an equivalent Maxwell-Boltzmann valence band\n\t\t\teffective density of states using an empirical model.\n    RETURN:\n\tvb_edos\t\tEffective density of states / m^-3\n    INPUT:\n\tvt\t\tThermal voltage / V\n    LOCAL:\n\tnv1\t\tFirst valence band effective density of states / m^-3\n\tnv2\t\tSecond valence band effective density of states / m^-3\n\tnv3\t\tThird valence band effective density of states / m^-3\n*/\nanalog function real vb_edos;\n    input vt;\n    real vt, nv1, nv2, nv3;\n    begin\n\tnv1 = edos(`W_MHD1, vt) * (1.0 + `W_GH1A_1_0 * exp(-`W_GH1B_1_0 / vt));\n\tnv2 = edos(`W_MHD2, vt) * (1.0 - `W_GH2A_1_0 * atan(`W_GH2B_1_0 * vt))\n\t      * exp(-`W_EV1V2 / vt);\n\tnv3 = edos(`W_MHD3, vt) * exp(-`W_EV1V3 / vt);\n\tvb_edos = nv1 + nv2 + nv3;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic conduction band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tcb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real cb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_ACN * cbrt(ndi) + `W_BCN * sqrt(ndi);\n\ttmp2 = `W_ACP * tsrt(nai) + `W_BCP * sqrt(nai);\n\tcb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the extrinsic valence-band energy shift as a\n\t\t\tfunction of ionised-impurity concentrations using an\n\t\t\tempirical model.\n    RETURN:\n\tvb_shift\tEnergy shift / eV\n    INPUT:\n\tndi\t\tIonised-donor concentration / m^-3\n\tnai\t\tIonised-acceptor concentration / m^-3\n    LOCAL:\n\ttmp1..2\t\tTemporary variables\n*/\nanalog function real vb_shift;\n    input ndi, nai;\n    real ndi, nai, tmp1, tmp2;\n    begin\n\ttmp1 = `W_AVN * tsrt(ndi) + `W_BVN * sqrt(ndi);\n\ttmp2 = `W_AVP * cbrt(nai) + `W_BVP * sqrt(nai) + `W_CVP * tsrt(nai);\n\tvb_shift = tmp1 + tmp2;\n    end\nendfunction\n\n/*\n    DESCRIPTION:\tCompute the thermal-equilibrium delocalised carrier\n\t\t\tconcentrations and the electrochemical potential,\n\t\t\trelative to intrinsic valence band extremum, of a\n\t\t\tnondegenerate semiconductor.\n    RETURN:\n\tionisation\tZero\n    INPUT:\n\tnd\t\tDonor concentration / m^-3\n\tna\t\tAcceptor concentration / m^-3\n\ttemp\t\tTemperature / K\n    OUTPUT:\n\tn0\t\tConduction band electron concentration / m^-3\n\tp0\t\tValence band hole concentration / m^-3\n\tef\t\tElectrochemical potential / eV\n    LOCAL:\n\tvt\t\tThermal voltage / V\n\tevi\t\tIntrinsic valence band extremum / eV\n\teci\t\tIntrinsic conduction band extremum / eV\n\tnc\t\tConduction band effective density of states / m^-3\n\tnv\t\tValence band effective density of states / m^-3\n\tgih\t\th-site impurity degeneracy\n\tgik\t\tk-site impurity degeneracy\n\tnih\t\th-site impurity concentration / m^-3\n\tnik\t\tk-site impurity concentration / m^-3\n\tnihi\t\tIonised h-site impurity concentration / m^-3\n\tniki\t\tIonised k-site impurity concentration / m^-3\n\tndi\t\tIonised donor concentration / m^-3\n\tnai\t\tIonised acceptor concentration / m^-3\n\tn0prime\t\tFirst derivative of n0 with respect to x / m^-3\n\tp0prime\t\tFirst derivative of p0 with respect to x / m^-3\n\tndiprime\tFirst derivative of ndi with respect to x / m^-3\n\tnaiprime\tFirst derivative of nai with respect to x / m^-3\n\tepsih\t\tNormalised h-site impurity level\n\tepsik\t\tNormalised k-site impurity level\n\tepsv\t\tNormalised extrinsic valence band extremum\n\tepsc\t\tNormalised extrinsic conduction band extremum\n\tepsf\t\tNormalised electrochemical potential\n\ttmp1..4\t\tTemporary variables\n\tx\t\tIndependent variable\n\ty\t\tDependent variable / m^-3\n\typrime\t\tFirst derivative of y with respect to x / m^-3\n\tabserr\t\tAbsolute change in x\n*/\nanalog function real ionisation;\n    input nd, na, temp;\n    output n0, p0, ef;\n    real nd, na, temp, n0, p0, ef, vt, evi, eci, nc, nv, gih, gik, nih, nik,\n\tnihi, niki, ndi, nai, n0prime, p0prime, ndiprime, naiprime, epsih,\n\tepsik, epsv, epsc, epsf, tmp1, tmp2, tmp3, tmp4, x, y, yprime, abserr;\n    begin\n\tvt = $vt(temp);\n\tevi = 0.0;\n\teci = `W_EG0 - `W_EGTA * sq(temp) / (temp + `W_EGTB);\n\tn0 = 0.0;\n\tn0prime = 0.0;\n\tp0 = 0.0;\n\tp0prime = 0.0;\n\tndi = 0.0;\n\tndiprime = 0.0;\n\tnai = 0.0;\n\tnaiprime = 0.0;\n\tif (nd > na) begin\n\t    nai = na;\n\t    nih = 0.5 * nd;\n\t    nik = 0.5 * nd;\n\t    gih = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDHDHA1 / vt);\n\t    gik = `W_GD_1S_A1 + `W_GD_1S_E * exp(-`W_EDKDKA1 / vt);\n\t    epsih = (eci - `W_EC1DH) / vt;\n\t    epsik = (eci - `W_EC1DK) / vt;\n\t    epsf = (na <= nih ? epsih : epsik);\n\tend\n\telse begin\n\t    ndi = nd;\n\t    nih = 0.5 * na;\n\t    nik = 0.5 * na;\n\t    gih = `W_GA_1S;\n\t    gik = `W_GA_1S;\n\t    epsih = (evi + `W_EAHV1) / vt;\n\t    epsik = (evi + `W_EAKV1) / vt;\n\t    epsf = (nd <= nih ? epsih : epsik);\n\tend\n\tabserr = 1.0;\n\twhile (abserr > `ENERGY_ABSTOL) begin\n\t    x = epsf;\n\t    if (nd > na) begin\n\t\tnc = cb_edos(vt);\n\t\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\t\tn0 = nc * exp(x - epsc);\n\t\tn0prime = n0;\n\t\ttmp1 = gih * exp(x - epsih);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(x - epsik);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tndi = nihi + niki;\n\t\tndiprime = -(nihi * tmp1 / tmp2 + niki * tmp3 / tmp4);\n\t    end\n\t    else begin\n\t\tnv = vb_edos(vt);\n\t\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\t\tp0 = nv * exp(epsv - x);\n\t\tp0prime = -p0;\n\t\ttmp1 = gih * exp(epsih - x);\n\t\ttmp2 = 1.0 + tmp1;\n\t\ttmp3 = gik * exp(epsik - x);\n\t\ttmp4 = 1.0 + tmp3;\n\t\tnihi = nih / tmp2;\n\t\tniki = nik / tmp4;\n\t\tnai = nihi + niki;\n\t\tnaiprime = nihi * tmp1 / tmp2 + niki * tmp3 / tmp4;\n\t    end\n\t    y = n0 - p0 - ndi + nai;\n\t    yprime = n0prime - p0prime - ndiprime + naiprime;\n\t    epsf = x - y / yprime;\n\t    abserr = abs(epsf - x) * vt;\n\tend\n\tnc = cb_edos(vt);\n\tnv = vb_edos(vt);\n\tepsc = (eci + cb_shift(ndi, nai)) / vt;\n\tepsv = (evi + vb_shift(ndi, nai)) / vt;\n\tn0 = nc * exp(epsf - epsc);\n\tp0 = nv * exp(epsv - epsf);\n\tef = epsf * vt;\n\tionisation = 0.0;\n    end\nendfunction\n\n`endif // FUNCTIONS_VA\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n            nik = 0.5 * na *; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n            nik = 0.5 * na;\n\n Correction Criteria：Syntax error: unmatched multiplication operator (missing right operand) due to trailing '*' without subsequent expression"
      }
    ]
  }
]