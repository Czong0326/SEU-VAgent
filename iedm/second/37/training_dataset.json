[
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    dummy = ionisation(NAC, NDC, tempk, n0c, p0c, efc); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\n Correction Criteria：Swapped NDC and NAC parameters reverses doping roles: donors become acceptors and vice versa. This corrupts channel carrier concentration calculations, Fermi level position, and subsequent conductivity/phij0b values since channel doping polarity is inverted."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t    real tempk_wrong;\t\t// Absolute device temperature / K Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t    real tempk;\t\t// Absolute device temperature / K\n\n Correction Criteria：Changed variable name from 'tempk' to 'tempk_wrong', breaking all subsequent temperature-dependent calculations. The correct 'tempk' variable remains undeclared, causing uninitialized values in thermal voltage, mobility, and saturation velocity computations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    real rb_noscale = 0.0;\t\t// Unscaled body resistance / ohm Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n\n Correction Criteria：Forcing rb_noscale to zero overrides the temperature-dependent calculation in initial_model block. This causes RB parameter to be ignored, eliminates body resistance temperature dependence, and makes rb always zero regardless of device parameters."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n            claim, damages or other liability, whether in an action of contract, */ Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n            claim, damages or other liability, whether in an action of contract,\n\n Correction Criteria：Prematurely terminates the comment block with '*/', causing subsequent license text to be interpreted as Verilog code. This leads to compilation failures due to invalid syntax in the exposed license text."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    if (vbsi >= 0.0) begin Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    if (vdsi >= 0.0) begin\n\n Correction Criteria：Changed condition from vdsi (drain-source voltage) to vbsi (body-source voltage). This incorrectly uses body-source voltage instead of drain-source voltage to determine operating mode, causing erroneous mode selection and subsequent current/charge calculations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        I(si_s) <+ 0.0; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        V(si_s) <+ 0.0;\n\n Correction Criteria：Changed voltage contribution to current contribution. When source resistance (rs) is zero, should short si/s nodes by setting V(si_s)=0. Using I(si_s)=0 leaves voltage undefined and breaks the short circuit requirement."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    if (RIE > 0.0) Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    if (RIE < 0.0)\n\n Correction Criteria：The condition incorrectly checks for positive RIE values instead of negative ones. This allows physically impossible negative gate overetch depths while rejecting valid positive/zero values, violating the non-negative constraint for process parameters."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    epss = `P_EPS0 * 1.0; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    epss = `P_EPS0 * EPSR;\n\n Correction Criteria：Changed EPSR to fixed constant 1.0, ignoring the material's actual relative permittivity parameter. This error causes incorrect semiconductor permittivity calculations, affecting all capacitance and potential calculations in the model."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nepss = `P_EPS0 / EPSR; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nepss = `P_EPS0 * EPSR;\n\n Correction Criteria：Replaced multiplication with division, incorrectly calculating semiconductor permittivity as vacuum permittivity divided by relative permittivity instead of multiplied by it. This violates the physical definition ε = ε₀·εᵣ and causes significant underestimation of capacitance effects."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    parameter real LC = 0.0 from (0 : inf); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    parameter real LC = 1e-4 from (0 : inf);\n\n Correction Criteria：Setting default channel length (LC) to 0.0 causes division by zero in conductance calculation (goc_noscale = sigmac * WC * hc / LC) and violates physical constraints requiring positive length."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t\t`error('RIE is greater than zero.'); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t\t`error('RIE is less than zero.');\n\n Correction Criteria：Changed error condition from negative RIE to positive RIE. Now incorrectly flags valid positive RIE values as errors while allowing negative RIE values that violate the non-negative constraint."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nrb_noscale = lin_adapt(RD, tdiff, RBTC); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nrb_noscale = lin_adapt(RB, tdiff, RBTC);\n\n Correction Criteria：Replaced body resistance parameter RB with drain resistance parameter RD in the temperature adaptation calculation, causing the body resistance scaling to incorrectly use the drain resistance value instead of the body resistance value."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    2. In any product based on the Software, the users agree not to acknowledge Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    2. In any product based on the Software, the users agree to acknowledge\n\n Correction Criteria：Changed license requirement from mandatory acknowledgment to prohibition of acknowledgment, violating the software's redistribution terms by removing credit attribution."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        if (DELTA1 < 0.0 && DELTA1 > 1.0) Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\n Correction Criteria：Changed logical OR (||) to AND (&&), creating an impossible condition. DELTA1 can never be simultaneously negative and greater than 1, bypassing all validation checks for this critical junction capacitance parameter."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    (* desc='Body capacitance', units='F', Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    (* desc='Body resistance', units='ohm',\n\n Correction Criteria：Changed parameter description from 'Body resistance' to 'Body capacitance' and units from 'ohm' to 'F'. This misrepresents the physical meaning of parameter RB, causing simulation tools to interpret it as capacitance instead of resistance. The calculation of rb (body resistance) will now incorrectly use a capacitance value, breaking Ohm's Law in the body resistance branch."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    (* desc='Temperature coefficient of VSAT', units='(deg C)^-1', Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    (* desc='Temperature exponent of VSAT', units='',\n\n Correction Criteria：Changed parameter description from 'exponent' to 'coefficient' and units from dimensionless to reciprocal degrees Celsius. This fundamentally alters the parameter's interpretation from a dimensionless exponent in the power function to a linear temperature coefficient, causing incorrect vsat calculations in thermal modeling."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    parameter real RSTC = 1.0; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    parameter real RSTC = 0.0;\n\n Correction Criteria：Changed default temperature coefficient of RS from 0 to 1. This causes incorrect positive temperature dependence where none was intended, violating the design specification that RS should remain stable across temperature by default."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\nGMBI = ddx(ids, V(di)); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\nGMBI = ddx(ids, V(bi));\n\n Correction Criteria：Changed derivative variable from body voltage (V(bi)) to drain voltage (V(di)), incorrectly calculating body transconductance as drain transconductance. This swaps the control terminal for GMBI and breaks body effect modeling."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        rb = -1.0; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        rb = 0.0;\n\n Correction Criteria：This modification introduces a non-physical negative resistance (-1.0 ohm) when RB=0.0, violating fundamental electrical principles and causing potential simulation instability."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    parameter real NDB = (TYPE == `N_TYPE ? 1e21 : 0.0); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n\n Correction Criteria：Swapped donor concentration assignments for body doping. In N_TYPE devices, NDB should be 0 (P-type body) but is incorrectly set to 1e21. In P_TYPE devices, NDB should be 1e21 (N-type body) but is set to 0. This reverses the body doping type, causing incorrect junction behavior and threshold voltage calculations."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        rd_noscale = lin_adapt(RD, tdiff, RDTC; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\n Correction Criteria：Missing closing parenthesis for function call 'lin_adapt"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    (* desc='First junction capacitance smoothing factor' units='V', Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    (* desc='First junction capacitance smoothing factor', units='V',\n\n Correction Criteria：Missing comma between attribute arguments in parameter declaration"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        if (AREA =< 0.0) Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        if (AREA <= 0.0)\n\n Correction Criteria：Invalid operator '=<' used instead of correct '<=' operator for less-than-or-equal comparison. Verilog-A requires '<=' for this comparison."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    else begin current_calculation Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    else begin : current_calculation\n\n Correction Criteria：Missing colon after 'begin' for block name declaration"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    parameter reel ISB = 0.0; Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    parameter real ISB = 0.0;\n\n Correction Criteria：Misspelled keyword 'real' as 'reel', which is not a valid VerilogA data type identifier"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t\t`warning('MTE1 and MTE2 are both greater than zero. Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t\t`warning('MTE1 and MTE2 are both greater than zero.');\n\n Correction Criteria：Missing closing parenthesis and semicolon for the `warning macro call, causing unterminated statement and syntax error."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    (* desc='Saturation velocity, units='m s^-1', Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    (* desc='Saturation velocity', units='m s^-1',\n\n Correction Criteria：Missing closing double quote after 'velocity', causing the string to extend to the next quote and creating an unterminated string syntax error."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        `error('EPSR is less than one.') Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        `error('EPSR is less than one.');\n\n Correction Criteria：Missing semicolon at the end of the `error macro statement. VerilogA requires all statements to terminate with semicolons, including compiler directives like `error."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    (* desc='Static dielectric constant' units='', Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    (* desc='Static dielectric constant', units='',\n\n Correction Criteria：Missing comma between attribute parameters in VerilogA comment-based attribute specification. The comma separating 'desc' and 'units' attributes was removed, causing a syntax error in the parameter list."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        `error('NAC is less than or equal to NDC.); Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        `error('NAC is less than or equal to NDC.');\n\n Correction Criteria：Missing closing double quote in string literal causes unterminated string error. The compiler expects a closing quote before the parenthesis."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n       xyceUnit='U_M2VM1SM1', xyceCategory='CAT_MATERIAL'  Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n       xyceUnit='U_M2VM1SM1', xyceCategory='CAT_MATERIAL' *)\n\n Correction Criteria：Missing closing comment tag '*)' at the end of the line, resulting in an unterminated block comment that starts on line 130."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        if (TYPE == `N_TYPE begin Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        if (TYPE == `N_TYPE) begin\n\n Correction Criteria：Missing closing parenthesis ')' for conditional expression before 'begin' keyword"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    rb = RMIN Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    rb = RMIN;\n\n Correction Criteria：Missing semicolon at the end of the assignment statement. VerilogA requires all statements to terminate with semicolons."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    parameter real DELTA2 = 0.2 Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    parameter real DELTA2 = 0.2;\n\n Correction Criteria：Missing semicolon at end of parameter declaration"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    tnomk = `P_CELSIUS0 + TNOM Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    tnomk = `P_CELSIUS0 + TNOM;\n\n Correction Criteria：Missing semicolon at the end of the assignment statement, which is required in VerilogA for statement termination."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    (* desc='Source resistance' units='ohm', Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    (* desc='Source resistance', units='ohm',\n\n Correction Criteria：Missing comma between attribute specifications causes syntax error. Attributes must be comma-separated within the comment block."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    if (MR < 0.0 Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    if (MR < 0.0)\n\n Correction Criteria：Missing closing parenthesis in condition statement for MR parameter check"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n    aj = WC * LC Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n    aj = WC * LC;\n\n Correction Criteria：Missing semicolon at the end of the assignment statement, causing a syntax error as the next token 'hc' becomes part of an invalid expression."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n        xyceUnit='U_METER', xyceCategory='CAT_GEOMETRY Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n        xyceUnit='U_METER', xyceCategory='CAT_GEOMETRY' *)\n\n Correction Criteria：Unterminated comment: Missing closing '*)' causes the rest of the code to be treated as a comment, leading to syntax errors in subsequent parameter declarations and module code."
      }
    ]
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are a Verilog-A hardware modeling expert. Below is a reference code snippet:\n```\n/* -------------------------------------------------------------------------- *\\\n\n\t    888\t  888\t888  888    888\t   88\t888888888\n\t     8\t   8\t 8    8\t     8\t\t8   8\t8\n\t     8\t   8\t 8    8\t     8\t   88\t    8\t    888888\n\t      8\t   8\t8     88888888\t    8\t    8\t   8\t  8\n\t      8\t  8 8\t8     8\t     8\t    8\t    8\t   88888888\n\t       8 8   8 8      8\t     8\t    8\t    8\t   8\n\t\t8     8\t     888    888\t  88888\t   888\t    8888888\n\n\n\n     8888888\t\t\t\t\t\t\t\t8\n    8\t    8\t\t\t\t\t\t\t\t8\n    8\t\t888888\t 888888 8888   88888888\t   888888     888888   88888\n    8\t       8      0\t  8    8    8\t8      8\t 8   8\t    8\t8\n    8\t       8      8\t  8    8    8\t8      8   8888888   8\t\t8\n    8\t    8  8      8\t  8    8    8\t8      8  8\t 8   8\t    8\t8\n     8888888\t888888\t 888  888  888\t8888888\t   888888 8   888888\t 888\n\t\t\t\t\t8\n\t\t\t\t       888\n\n\t  888\t    888\t\t\t 88\t\t888\n\t   8 8\t   8 8\t\t\t  8\t\t  8\n\t   8  8\t  8  8\t  888888    8888888    888888\t  8\t8888888\n\t   8   8 8   8\t 8\t8  8\t  8   8\t     8\t  8    8\n\t   8\t8    8\t 8\t8  8\t  8   88888888\t  8\t888888\n\t   8\t     8\t 8\t8  8\t  8   8\t\t  8\t      8\n\t  888\t    888\t  888888    888888 8   8888888\t88888  8888888\n\n|* -------------------------------------------------------------------------- *|\n\n    This file contains a module for a resistor.\n\n|* -------------------------------------------------------------------------- *|\n\n    Copyright @ 2023 Neal Graham Wood\n    The terms under which the software and associated documentation (the\n    Software) is provided are as the following:\n\n    DISCLAIMER:  The Software is provided \"as is\", without warranty of any\n    kind, express or implied, including but not limited to the warranties of\n    merchantability, fitness for a particular purpose and noninfringement.\n    In no event shall the authors or copyright holders be liable for any\n    claim, damages or other liability, whether in an action of contract,\n    tort or otherwise, arising from, out of or in connection with the\n    Software or the use or other dealings in the Software.\n\n    Neal Graham Wood grants, free of charge, to any users the right to\n    modify, copy, and redistribute the Software, both within the user's\n    organization and externally, subject to the following restrictions:\n\n    LIST OF CONDITIONS:\n    1. The users agree not to charge for the code itself but may charge for\n    additions, extensions, or support.\n\n    2. In any product based on the Software, the users agree to acknowledge\n    the Research Group that developed the software. This acknowledgment\n    shall appear in the product documentation.\n\n    3. The users agree to obey all U.S. Government restrictions governing\n    redistribution or export of the software.\n\n    4. Redistributions to others of source code must retain the copyright\n    notice, disclaimer, and list of conditions.\n\n    5. Redistributions to others in binary form must reproduce the\n    copyright notice, disclaimer, and list of conditions in the\n    documentation and/or other materials provided with the distribution.\n\n    Agreed to by\n    Neal Graham Wood\n    19/03/2023\n\n\\* -------------------------------------------------------------------------- */\n\n`include \"constants.vams\"\n`include \"disciplines.vams\"\n\n`include \"macros.va\"\n\n(* xyceModelGroup=\"Resistor\", xyceLevelNumber=\"146\", xyceTypeVariable=\"TYPE\",\n   xyceDeviceName=\"WHiTe Resistor v2.3.2\" *)\nmodule whiter(d, s, b);\n    inout d, s, b;\t\t// Drain, source and body terminals\n    electrical d, s, b;\t\t// Terminal nodes\n    electrical di, si, bi;\t// Intrinsic nodes\n    branch (d, di) d_di;\t// Drain resistance\n    branch (di, si) di_si;\t// Channel\n    branch (si, s) si_s;\t// Source resistance\n    branch (b, bi) b_bi;\t// Body resistance\n    branch (bi, di) bi_di;\t// Body-drain junction\n    branch (bi, si) bi_si;\t// Body-source junction\n\n    `include \"functions.va\"\n\n    (* desc=\"Model type\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CONTROL\" *)\n    parameter integer TYPE = `N_TYPE;\n    (* desc=\"Channel acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAC = (TYPE == `N_TYPE ? 0.0 : 1e23);\n    (* desc=\"Channel donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDC = (TYPE == `N_TYPE ? 1e23 : 0.0);\n    (* desc=\"Body acceptor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NAB = (TYPE == `N_TYPE ? 1e21 : 0.0);\n    (* desc=\"Body donor concentration\", units=\"m^-3\",\n       xyceUnit=\"U_METERM3\", xyceCategory=\"CAT_DOPING\" *)\n    parameter real NDB = (TYPE == `N_TYPE ? 0.0 : 1e21);\n    (* desc=\"Channel length\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real LC = 1e-4 from (0 : inf);\n    (* desc=\"Channel width\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real WC = 1e-4;\n    (* desc=\"Channel height\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_GEOMETRY\" *)\n    parameter real HC = 2.5e-7;\n    (* desc=\"Gate overetch depth\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real RIE = 0.0;\n    (* desc=\"Sacrificial oxide thickness\", units=\"m\",\n       xyceUnit=\"U_METER\", xyceCategory=\"CAT_PROCESS\" *)\n    parameter real TOX = 0.0;\n    (* desc=\"Static dielectric constant\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real EPSR = `W_EPSR_C;\n    (* desc=\"Low-field mobility\", units=\"m^2 V^-1 s^-1\",\n       xyceUnit=\"U_M2VM1SM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real MU0 = (TYPE == `N_TYPE ? 5e-2 : 1e-2);\n    (* desc=\"Saturation velocity\", units=\"m s^-1\",\n       xyceUnit=\"U_MSM1\", xyceCategory=\"CAT_MATERIAL\" *)\n    parameter real VSAT = 5e5;\n    (* desc=\"Minimum resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RMIN = 1e-3;\n    (* desc=\"Drain resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RD = 0.0;\n    (* desc=\"Source resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RS = 0.0;\n    (* desc=\"Body resistance\", units=\"ohm\",\n       xyceUnit=\"U_OHM\", xyceCategory=\"CAT_RES\" *)\n    parameter real RB = 0.0;\n    (* desc=\"Body reverse-bias saturation current\", units=\"A\",\n       xyceUnit=\"U_AMP\", xyceCategory=\"CAT_CURRENT\" *)\n    parameter real ISB = 0.0;\n    (* desc=\"Forward-bias junction capacitance coefficient\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_CAP\" *)\n    parameter real FC = 0.5;\n    (* desc=\"First junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA1 = 0.5;\n    (* desc=\"Second junction capacitance smoothing factor\", units=\"V\",\n       xyceUnit=\"U_VOLT\", xyceCategory=\"CAT_CAP\" *)\n    parameter real DELTA2 = 0.2;\n    (* desc=\"Nominal temperature\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real TNOM = 27.0;\n    (* desc=\"Device to ambient temperature difference\", units=\"deg C\",\n       xyceUnit=\"U_DEGC\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real DTEMP = 0.0;\n    (* desc=\"Nominal ratio of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MR = 0.0;\n    (* desc=\"First temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE1 = 0.0;\n    (* desc=\"Second temperature exponent of MU0\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real MTE2 = 0.0;\n    (* desc=\"Temperature exponent of VSAT\", units=\"\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real VTE = 0.0;\n    (* desc=\"Temperature coefficient of RD\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RDTC = 0.0;\n    (* desc=\"Temperature coefficient of RS\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RSTC = 0.0;\n    (* desc=\"Temperature coefficient of RB\", units=\"(deg C)^-1\",\n       xyceUnit=\"U_DEGCM1\", xyceCategory=\"CAT_TEMP\" *)\n    parameter real RBTC = 0.0;\n\n    (* desc=\"Area factor\", units=\"\", type=\"instance\",\n       xyceUnit=\"U_NONE\", xyceCategory=\"CAT_SCALING\" *)\n    parameter real AREA = 1.0 from (0.0 : inf);\n\n    real phipob;\t\t// Body pinch-off potential / V\n    real vt;\t\t\t// Thermal voltage / V\n    real mu0;\t\t\t// Low-field mobility / m^2 V^-1 s^-1\n    real vsat;\t\t\t// Saturation velocity / m s^-1\n    real rd_noscale;\t\t// Unscaled drain resistance / ohm\n    real rs_noscale;\t\t// Unscaled source resistance / ohm\n    real rb_noscale;\t\t// Unscaled body resistance / ohm\n    real isb_noscale;\t\t/* Unscaled body reverse-bias saturation\n\t\t\t\t   current / A */\n    real phij0b;\t\t// Body zero-bias junction potential / V\n    real cj0b_noscale;\t\t/* Unscaled body zero-bias junction\n\t\t\t\t   capacitance / F */\n    real goc_noscale;\t\t// Unscaled open-channel conductance / S\n    real xi;\t\t\t// Transport parameter / V^-1\n    real vtob;\t\t\t// Body turn-off voltage / V\n    real vmaxb;\t\t\t// Body forward-bias linearisation voltage / V\n\n    real rd;\t\t\t// Drain resistance / ohm\n    real rs;\t\t\t// Source resistance / ohm\n    real rb;\t\t\t// Body resistance / ohm\n    real isb;\t\t\t// Body reverse-bias saturation current / A\n    real cj0b;\t\t\t// Body zero-bias junction capacitance / F\n    real goc;\t\t\t// Open-channel conductance / S\n\n    (* desc=\"Intrinsic output conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GOI;\n    (* desc=\"Intrinsic body mutual conductance\", units=\"S\",\n       multiplicity=\"multiply\" *)\n    real GMBI;\n    (* desc=\"Intrinsic body-drain capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBDI;\n    (* desc=\"Intrinsic body-source capacitance\", units=\"F\",\n       multiplicity=\"multiply\" *)\n    real CBSI;\n\n    analog begin : top_level\n\treal vdsi;\t\t// Intrinsic drain-source voltage / V\n\treal vbdi;\t\t// Intrinsic body-drain voltage / V\n\treal vbsi;\t\t// Intrinsic body-source voltage / V\n\n\t`INITIAL_MODEL begin : initial_model\n\t    real ndac;\t\t// Channel net dopant concentration / m^-3\n\t    real nadb;\t\t// Body net dopant concentration / m^-3\n\t    real aj;\t\t// Junction area / m^2\n\t    real hc;\t\t// Channel height / m\n\t    real epss;\t\t// Semiconductor electric permittivity / F m^-1\n\t    real tnomk;\t\t// Absolute nominal temperature / K\n\t    real tempk;\t\t// Absolute device temperature / K\n\t    real tquot;\t\t// Device to nominal temperature quotient\n\t    real tdiff;\t\t// Device to nominal temperature difference / K\n\t    real vtnom;\t\t// Nominal thermal voltage / V\n\t    real dummy;\t\t// Placeholder variable\n\t    real n0c;\t\t// Channel electron concentration / m^-3\n\t    real p0c;\t\t// Channel hole concentration / m^-3\n\t    real efc;\t\t// Channel electrochemical potential / eV\n\t    real efb;\t\t// Body electrochemical potential / eV\n\t    real sigmac;\t// Channel conductivity / S m^-1\n\n\t    if (!$param_given(RD) && $param_given(RS))\n\t\t`warning(\"RD is not given.\");\n\t    else if (!$param_given(RS) && $param_given(RD))\n\t\t`warning(\"RS is not given.\");\n\t    if (!$param_given(RDTC) && $param_given(RSTC))\n\t\t`warning(\"RDTC is not given.\");\n\t    else if (!$param_given(RSTC) && $param_given(RDTC))\n\t\t`warning(\"RSTC is not given.\");\n\t    if (!$param_given(MTE1) && $param_given(MTE2))\n\t\t`warning(\"MTE1 is not given.\");\n\t    else if (!$param_given(MTE2) && $param_given(MTE1))\n\t\t`warning(\"MTE2 is not given.\");\n\t    if (MTE1 > 0.0 && MTE2 > 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both greater than zero.\");\n\t    if (MTE1 < 0.0 && MTE2 < 0.0)\n\t\t`warning(\"MTE1 and MTE2 are both less than zero.\");\n\n\t    if (TYPE != `N_TYPE && TYPE != `P_TYPE)\n\t\t`error(\"TYPE must be one (NR) or negative one (PR).\");\n\t    if (NAC < 0.0)\n\t\t`error(\"NAC is less than zero.\");\n\t    if (NDC < 0.0)\n\t\t`error(\"NDC is less than zero.\");\n\t    if (NAB < 0.0)\n\t\t`error(\"NAB is less than zero.\");\n\t    if (NDB < 0.0)\n\t\t`error(\"NDB is less than zero.\");\n\t    if (LC <= 0.0)\n\t\t`error(\"LC is less than or equal to zero.\");\n\t    if (WC <= 0.0)\n\t\t`error(\"WC is less than or equal to zero.\");\n\t    if (HC <= 0.0)\n\t\t`error(\"HC is less than or equal to zero.\");\n\t    if (RIE < 0.0)\n\t\t`error(\"RIE is less than zero.\");\n\t    if (TOX < 0.0)\n\t\t`error(\"TOX is less than zero.\");\n\t    if (EPSR < 1.0)\n\t\t`error(\"EPSR is less than one.\");\n\t    if (MU0 <= 0.0)\n\t\t`error(\"MU0 is less than or equal to zero.\");\n\t    if (VSAT <= 0.0)\n\t\t`error(\"VSAT is less than or equal to zero.\");\n\t    if (RMIN <= 0.0)\n\t\t`error(\"RMIN is less than or equal to zero.\");\n\t    if (RD < 0.0)\n\t\t`error(\"RD is less than zero.\");\n\t    if (RS < 0.0)\n\t\t`error(\"RS is less than zero.\");\n\t    if (RB < 0.0)\n\t\t`error(\"RB is less than zero.\");\n\t    if (ISB < 0.0)\n\t\t`error(\"ISB is less than zero.\");\n\t    if (FC < 0.0 || FC > 1.0)\n\t\t`error(\"FC is less than zero or greater than one.\");\n\t    if (DELTA1 < 0.0 || DELTA1 > 1.0)\n\t\t`error(\"DELTA1 is less than zero or greater than one.\");\n\t    if (DELTA2 < 0.0 || DELTA2 > 1.0)\n\t\t`error(\"DELTA2 is less than zero or greater than one.\");\n\t    if (TNOM <= -`P_CELSIUS0)\n\t\t`error(\"TNOM is less than or equal to negative P_CELSIUS0.\");\n\t    if (DTEMP <= -$temperature)\n\t\t`error(\"DTEMP is less than or equal to negative $temperature.\");\n\t    if (MR < 0.0)\n\t\t`error(\"MR is less than zero.\");\n\n\t    if (TYPE == `N_TYPE) begin\n\t\tif (NDC <= NAC)\n\t\t    `error(\"NDC is less than or equal to NAC.\");\n\t\tif (NAB <= NDB)\n\t\t    `error(\"NAB is less than or equal to NDB.\");\n\t    end\n\t    else begin\n\t\tif (NAC <= NDC)\n\t\t    `error(\"NAC is less than or equal to NDC.\");\n\t\tif (NDB <= NAB)\n\t\t    `error(\"NDB is less than or equal to NAB.\");\n\t    end\n\t    if (HC <= RIE + TOX)\n\t\t`error(\"HC is less than or equal to RIE plus TOX.\");\n\n\t    ndac = TYPE * (NDC - NAC);\n\t    nadb = TYPE * (NAB - NDB);\n\t    aj = WC * LC;\n\t    hc = HC - RIE - TOX;\n\t    epss = `P_EPS0 * EPSR;\n\t    phipob = njf_sg_po_pot(nadb, ndac, epss, hc);\n\n\t    tnomk = `P_CELSIUS0 + TNOM;\n\t    tempk = $temperature + DTEMP;\n\t    tquot = tempk / tnomk;\n\t    tdiff = tempk - tnomk;\n\t    vtnom = $vt(tnomk);\n\t    vt = $vt(tempk);\n\t    mu0 = dual_pow_adapt(MU0, MR, tquot, MTE1, MTE2);\n\t    vsat = pow_adapt(VSAT, tquot, VTE);\n\t    rd_noscale = lin_adapt(RD, tdiff, RDTC);\n\t    rs_noscale = lin_adapt(RS, tdiff, RSTC);\n\t    rb_noscale = lin_adapt(RB, tdiff, RBTC);\n\t    isb_noscale = ISB * exp(`W_EG0 * (1.0 / vtnom - 1.0 / vt));\n\t    dummy = ionisation(NDC, NAC, tempk, n0c, p0c, efc);\n\t    dummy = ionisation(NDB, NAB, tempk, dummy, dummy, efb);\n\t    sigmac = `P_Q * (TYPE == `N_TYPE ? n0c : p0c) * mu0;\n\t    phij0b = TYPE * (efc - efb);\n\t    cj0b_noscale = pnj_cap(nadb, ndac, epss, phij0b, aj);\n\t    goc_noscale = sigmac * WC * hc / LC;\n\t    xi = mu0 / (vsat * LC);\n\t    vtob = njf_sg_to_volt(phij0b, phipob);\n\t    vmaxb = `FORWARD_COEFFICIENT * phij0b;\n\tend\n\n\t`INITIAL_INSTANCE begin\n\t    if (AREA <= 0.0)\n\t\t`error(\"AREA is less than or equal to zero.\");\n\n\t    if (RD == 0.0)\n\t\trd = 0.0;\n\t    else begin\n\t\trd = rd_noscale / AREA;\n\t\tif (rd < RMIN) begin\n\t\t    `warning(\"rd is less than RMIN, setting it to RMIN.\");\n\t\t    rd = RMIN;\n\t\tend\n\t    end\n\t    if (RS == 0.0)\n\t\trs = 0.0;\n\t    else begin\n\t\trs = rs_noscale / AREA;\n\t\tif (rs < RMIN) begin\n\t\t    `warning(\"rs is less than RMIN, setting it to RMIN.\");\n\t\t    rs = RMIN;\n\t\tend\n\t    end\n\t    if (RB == 0.0)\n\t\trb = 0.0;\n\t    else begin\n\t\trb = rb_noscale / AREA;\n\t\tif (rb < RMIN) begin\n\t\t    `warning(\"rb is less than RMIN, setting it to RMIN.\");\n\t\t    rb = RMIN;\n\t\tend\n\t    end\n\t    isb = isb_noscale * AREA;\n\t    cj0b = cj0b_noscale * AREA;\n\t    goc = goc_noscale * AREA;\n\tend\n\n\tvdsi = TYPE * V(di_si);\n\tvbdi = TYPE * V(bi_di);\n\tvbsi = TYPE * V(bi_si);\n\n\tI(di_si) <+ $simparam(\"gmin\", 0.0) * V(di_si);\n\tI(bi_di) <+ $simparam(\"gmin\", 0.0) * V(bi_di);\n\tI(bi_si) <+ $simparam(\"gmin\", 0.0) * V(bi_si);\n\n\tif (rd == 0.0)\n\t    V(d_di) <+ 0.0;\n\telse\n\t    I(d_di) <+ V(d_di) / rd;\n\n\tif (rs == 0.0)\n\t    V(si_s) <+ 0.0;\n\telse\n\t    I(si_s) <+ V(si_s) / rs;\n\n\tif (rb == 0.0)\n\t    V(b_bi) <+ 0.0;\n\telse\n\t    I(b_bi) <+ V(b_bi) / rb;\n\n\tif (isb > 0.0) begin\n\t    I(bi_di) <+ TYPE * pnj_curr(isb, vbdi, vt, vmaxb);\n\t    I(bi_si) <+ TYPE * pnj_curr(isb, vbsi, vt, vmaxb);\n\tend\n\n\tbegin : channel\n\t    integer mode;\t// Drain-source polarity\n\t    real vbs;\t\t// Body-source voltage / V\n\t    real vds;\t\t// Drain-source voltage / V\n\t    real ids;\t\t// Drain-source current / A\n\t    real qbd;\t\t// Body-drain charge / C\n\t    real qbs;\t\t// Body-source charge / C\n\t    real qb;\t\t// Body charge / C\n\t    real tmp1, tmp2;\t// Temporary variables\n\n\t    if (vdsi >= 0.0) begin\n\t\tmode = `FORWARD_MODE;\n\t\tvbs = vbsi;\n\t    end\n\t    else begin\n\t\tmode = `REVERSE_MODE;\n\t\tvbs = vbdi;\n\t    end\n\t    vds = mode * vdsi;\n\t    if (vbs < vtob)\n\t\tids = 0.0;\n\t    else begin : current_calculation\n\t\treal phijb;\t// Body junction potential / V\n\t\treal vdssat;\t// Saturation drain-source voltage / V\n\t\treal vdslim;\t// Limited drain-source voltage / V\n\n\t\tphijb = soft_max(phij0b - vbs, 0.0, `FORWARD_SMOOTHING);\n\t\tvdssat = njf_sg_sat_volt(phijb, phipob, xi);\n\t\tvdslim = min(vds, vdssat);\n\t\tids = TYPE * njf_sg_curr(goc, vdslim, phijb, phipob, xi);\n\t    end\n\t    tmp1 = TYPE * njf_sg_gd_chrg(cj0b, vbdi, vbsi, DELTA1);\n\t    tmp2 = TYPE * njf_sg_gs_chrg(cj0b, phij0b, vbdi, vbsi, vtob,\n\t\t\t\t\t FC * phij0b, DELTA1, DELTA2);\n\t    if (mode == `FORWARD_MODE) begin\n\t\tqbd = tmp1;\n\t\tqbs = tmp2;\n\t    end\n\t    else begin\n\t\tqbd = tmp2;\n\t\tqbs = tmp1;\n\t    end\n\t    qb = qbd + qbs;\n\t    if (mode == `FORWARD_MODE)\n\t\tGOI = ddx(ids, V(di));\n\t    else\n\t\tGOI = ddx(ids, V(si));\n\t    GMBI = ddx(ids, V(bi));\n\t    CBDI = -ddx(qb, V(di));\n\t    CBSI = -ddx(qb, V(si));\n\t    I(di_si) <+ mode * ids;\n\t    I(bi_di) <+ ddt(qbd);\n\t    I(bi_si) <+ ddt(qbs);\n\tend\n    end\nendmodule\n```\n Please correct the code based on the input error code, paying attention to functional and syntactic accuracy."
      },
      {
        "role": "user",
        "content": "Please correct the problematic Verilog-A code below:\n\t\t\t    `warning('rd is less than RMIN, setting it to RMIN.') Please provide the corrected code and the Correction Criteria."
      },
      {
        "role": "assistant",
        "content": "corrected code：\n\t\t\t    `warning('rd is less than RMIN, setting it to RMIN.');\n\n Correction Criteria：Missing semicolon at the end of the `warning macro call. VerilogA requires all statements to be terminated with a semicolon."
      }
    ]
  }
]