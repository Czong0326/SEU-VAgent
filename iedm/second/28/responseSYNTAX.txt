[
	{
		"original_line": "initial $display("Fatal Error: R0 must be positive value!");", 
		"bug_line": "initial $display("Fatal Error: R0 must be positive value!);",
		"error_description": "Missing closing double quote (") for the string literal, causing an unterminated string error. The compiler will expect the closing quote and fail to parse subsequent tokens correctly."
	},
	{
		"original_line": "  initial $display("Fatal Error: R0 must be positive value!");", 
		"bug_line": "  initial $display("Fatal Error: R0 must be positive value!"",
		"error_description": "Missing closing parenthesis and semicolon. The function call lacks termination, causing syntax errors due to unbalanced parentheses and missing statement end."
	},
	{
		"original_line": "  real R_actual = R0 * (1 + ", 
		"bug_line": "  reel R_actual = R0 * (1 + ",
		"error_description": "Misspelled keyword 'real' as 'reel', which is not a valid data type in VerilogA"
	},
	{
		"original_line": "generate if (R0 <= 0) begin", 
		"bug_line": "generate if (R0 <= 0 begin",
		"error_description": "Missing closing parenthesis for the conditional expression in the generate if statement"
	},
	{
		"original_line": "  initial $display("Fatal Error: R0 must be positive value!");", 
		"bug_line": "  initial $display("Fatal Error: R0 must be positive value!");;",
		"error_description": "Double semicolon at statement termination creates invalid empty statement token"
	},
	{
		"original_line": "inout p, n;", 
		"bug_line": "inout p n;",
		"error_description": "Missing comma between port identifiers 'p' and 'n', violating VerilogA's port declaration syntax which requires commas to separate multiple identifiers."
	},
	{
		"original_line": "$strobe("Error: Negative resistance %.2e立 at V=%.2fV", R_actual, v_pn);", 
		"bug_line": "$strobe("Error: Negative resistance %.2e立 at V=%.2fV, R_actual, v_pn);",
		"error_description": "Unterminated string literal due to missing closing double quote after the format string, causing the comma and variables to be included in the string and breaking the argument structure."
	},
	{
		"original_line": "  `endif", 
		"bug_line": "  `end",
		"error_description": "Changed 'endif' to 'end', which is an invalid compiler directive. The conditional compilation block requires 'endif' to terminate the `ifdef section, and 'end' alone is unrecognized syntax."
	},
	{
		"original_line": "real vcoeff_linear = VC1 * 1e-6;  // 1 ppm = 1e-6", 
		"bug_line": "real vcoeff_linear = VC1 * 1e-6  // 1 ppm = 1e-6",
		"error_description": "Missing semicolon at the end of the statement causes unterminated declaration, leading to syntax errors when combined with the next line."
	},
	{
		"original_line": "  if (R_actual <= 0) begin", 
		"bug_line": "  if (R_actual =< 0) begin",
		"error_description": "Invalid operator '=<' for less-than-or-equal comparison. Correct operator is '<=' in VerilogA."
	},
	{
		"original_line": "  real vcoeff_linear = VC1 * 1e-6;  // 1 ppm = 1e-6", 
		"bug_line": "  real vcoeff_linear = VC1 1e-6;  // 1 ppm = 1e-6",
		"error_description": "Missing multiplication operator (*) between VC1 and 1e-6, resulting in invalid consecutive expressions without an operator"
	},
	{
		"original_line": "electrical p, n;", 
		"bug_line": "electrical p, n",
		"error_description": "Missing semicolon at the end of the discipline declaration"
	},
	{
		"original_line": "  if (R_actual <= 0) begin", 
		"bug_line": "  if (R_actual <= 0 begin",
		"error_description": "Missing closing parenthesis for the condition in the if statement"
	},
	{
		"original_line": "parameter real V_MAX = 10 from (0.1 to 100);   // Maximum safe operating voltage [V]", 
		"bug_line": "parameter real V_MAX = 10 from (0.1 to 100)   // Maximum safe operating voltage [V]",
		"error_description": "Missing semicolon at the end of the parameter declaration statement. VerilogA requires all statements to terminate with a semicolon."
	},
	{
		"original_line": "  real vcoeff_quad   = VC2 * 1e-6;", 
		"bug_line": "  real vcoeff_quad   = VC2 * 1e-6",
		"error_description": "Missing semicolon at the end of the statement, causing unterminated assignment"
	},
	{
		"original_line": "parameter real R0 = 1e3 from (1e-3 to 1e9);    // Nominal resistance [立]", 
		"bug_line": "parameter real R0 = 1e3 from (1e-3 to 1e9;    // Nominal resistance [立]",
		"error_description": "Missing closing parenthesis for the range expression in the parameter declaration, causing unbalanced parentheses."
	},
	{
		"original_line": "$strobe("Warning: %.3fV exceeds V_MAX=%.1fV at %t", v_pn, V_MAX, $realtime);", 
		"bug_line": "$strobe("Warning: %.3fV exceeds V_MAX=%.1fV at %t", v_pn, V_MAX, $realtime;",
		"error_description": "Missing closing parenthesis for the $strobe function call, causing unmatched parentheses syntax error."
	},
	{
		"original_line": "$bound_step(0.1*(R_actual * 1e-12));", 
		"bug_line": "$bound_step(0.1*(R_actual * 1e-12);",
		"error_description": "Missing closing parenthesis for the function call. The inner expression parentheses are properly closed, but the outer function call lacks its required closing parenthesis before the semicolon."
	},
	{
		"original_line": "$strobe("Warning: %.3fV exceeds V_MAX=%.1fV at %t", v_pn, V_MAX, $realtime);", 
		"bug_line": "$strobe("Warning: %.3fV exceeds V_MAX=%.1fV at %t", v_pn, V_MAX, $realtime",
		"error_description": "Missing closing parenthesis for the $strobe function call and missing semicolon at the end of the statement"
	},
	{
		"original_line": "  real R_actual = R0 * (1 + ", 
		"bug_line": "  real R_actual = R0 * (1 ;",
		"error_description": "Semicolon prematurely terminates the assignment expression, leaving subsequent lines (vcoeff_linear ...) as invalid tokens outside any statement."
	}
]