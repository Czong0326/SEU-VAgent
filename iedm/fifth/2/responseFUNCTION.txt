[
	{
		"original_line": "if (mtype == `RMS) begin", 
		"bug_line": "if (mtype == `ABSOLUTE) begin",
		"error_description": "The condition incorrectly checks for ABSOLUTE mode instead of RMS mode. This causes the RMS calculation logic to execute in absolute measurement mode and vice versa, swapping the functional behavior of both modes."
	},
	{
		"original_line": "   svcvs #(.poles({-2*`PI*bw,0})) output_filter   (vinter2,vgnd,vinter1,vgnd);", 
		"bug_line": "   svcvs #(.poles({2*`PI*bw,0})) output_filter   (vinter2,vgnd,vinter1,vgnd);",
		"error_description": "The negative pole is changed to positive, making the filter unstable. Instead of attenuating high frequencies, the filter will amplify any input signal causing unbounded output growth, violating the intended low-pass filtering behavior."
	},
	{
		"original_line": "`define ABSTOL_TIME 1e-12", 
		"bug_line": "`define ABSTOL_TIME -1e-12",
		"error_description": "Negative ABSTOL_TIME causes RMS mode to attempt calculation at time zero, resulting in division by zero and simulation failure."
	},
	{
		"original_line": "`define RMS 1", 
		"bug_line": "`define RMS 0",
		"error_description": "Sets RMS mode identifier to 0 which conflicts with ABSOLUTE mode (0). This causes RMS measurements to be incorrectly processed as absolute voltage measurements, violating functional requirements for RMS calculation."
	},
	{
		"original_line": "      vout_val = V(vinter2);       ", 
		"bug_line": "      vout_val = V(vinter1);       ",
		"error_description": "Incorrectly uses the input to the filter (vinter1) instead of the output (vinter2) for the filtered signal. This bypasses the intended filtering when bandwidth is non-zero, causing unfiltered signals to propagate."
	},
	{
		"original_line": "      if (mtype == `RMS) begin", 
		"bug_line": "      if (mtype == `ABSOLUTE) begin",
		"error_description": "The condition incorrectly checks for absolute mode instead of RMS mode. This causes the RMS calculation branch to execute in absolute mode (outputting 0 due to missing squared input accumulation) and skips RMS processing in actual RMS mode (outputting instantaneous voltage instead of RMS value)."
	},
	{
		"original_line": "parameter integer log_to_file = 0;", 
		"bug_line": "parameter integer log_to_file = 1;",
		"error_description": "Changed default log_to_file value from 0 to 1. This forces file logging by default, violating the design specification that logging should be disabled by default (parameter = 0)."
	},
	{
		"original_line": "vin_val = V(vp,vn);", 
		"bug_line": "vin_val = V(vn,vp);",
		"error_description": "The voltmeter now measures the negative voltage (V(vn) - V(vp)) instead of the intended differential voltage (V(vp) - V(vn)). This sign inversion causes incorrect absolute voltage readings and distorts RMS calculations by squaring negative values, producing positive but erroneous results."
	},
	{
		"original_line": "integ_vin_sqd  = idt(input_expr, 0 );", 
		"bug_line": "integ_vin_sqd  = idt(input_expr, 1 );",
		"error_description": "Changed initial integrator condition from 0 to 1, causing incorrect RMS voltage calculation due to added constant bias in the integrated square value."
	},
	{
		"original_line": "      vout_val = V(vinter2);", 
		"bug_line": "      vout_val = V(vp);",
		"error_description": "The modified line incorrectly measures the voltage at terminal vp (relative to ground) instead of the filtered output voltage at vinter2. This bypasses the output filter and directly outputs the raw input voltage when bandwidth is non-zero, violating the filtering requirement."
	},
	{
		"original_line": "out_file = $fopen( "%C:r.dat" );", 
		"bug_line": "out_file = $fopen( "r.dat" );",
		"error_description": "Removed the '%C:' filename pattern that dynamically inserts the instance name. This causes all voltmeter instances to log to the same fixed 'r.dat' file instead of instance-specific files, resulting in data corruption when multiple instances are used."
	},
	{
		"original_line": "out_file = $fopen( "%C:r.dat" );", 
		"bug_line": "out_file = $fopen( "w" );",
		"error_description": "Changed filename to "w", which opens the file in write mode but uses a fixed filename 'w' instead of the instance-specific name generated by '%C'. This violates the design requirement for unique filenames per instance and causes all voltmeter instances to overwrite the same output file."
	},
	{
		"original_line": "parameter integer mtype = `ABSOLUTE;", 
		"bug_line": "parameter integer mtype = `RMS;",
		"error_description": "Changes the default measurement type from absolute voltage to RMS, violating the design specification that requires absolute voltage as the default behavior."
	},
	{
		"original_line": "V(vgnd) <+ 0;", 
		"bug_line": "V(vgnd) <+ 1;",
		"error_description": "Sets reference voltage to 1V instead of 0V, introducing a constant 1V offset in all measurements and corrupting RMS calculations due to incorrect ground reference."
	},
	{
		"original_line": "$fstrobe(out_file, "%-.10g\t%-.10g", $abstime, vout_val);", 
		"bug_line": "$fstrobe(out_file, "%-.10g\t%-.10g", $abstime, vin_val);",
		"error_description": "Logs raw input voltage (vin_val) instead of processed output voltage (vout_val). Violates design specification to record measured voltage after RMS/absolute conversion and filtering."
	},
	{
		"original_line": "input_expr = 0;", 
		"bug_line": "input_expr = vin_val;",
		"error_description": "In RMS mode during initial time (< ABSTOL_TIME), incorrectly assigns raw voltage instead of 0, causing integration of unsquared values which corrupts RMS calculation by mixing voltage and squared voltage terms."
	},
	{
		"original_line": "electrical vp, vn, vout;", 
		"bug_line": "electrical vp, vn, vout_wrong;",
		"error_description": "The output port 'vout' is incorrectly renamed to 'vout_wrong', breaking all internal connections to the output port. This leaves the output floating since assignments to 'vout' now target an undeclared net while the actual output port remains unassigned."
	},
	{
		"original_line": "if (log_to_file) begin", 
		"bug_line": "if (log_to_file == 1) begin",
		"error_description": "The condition now incorrectly requires log_to_file to be exactly 1 instead of any non-zero value. This violates the design specification where any non-zero value should enable logging, causing logging to fail for valid non-zero settings like 2 or -1."
	},
	{
		"original_line": "electrical vp, vn, vout;", 
		"bug_line": "real vp, vn, vout;",
		"error_description": "Ports declared as real numbers instead of electrical nodes. This breaks discipline typing, preventing voltage measurements and causing simulation failures due to incompatible connections and undefined V() operations."
	},
	{
		"original_line": "vin_val = V(vp,vn);", 
		"bug_line": "vin_val = I(vp,vn);",
		"error_description": "Replaced voltage measurement (V) with current measurement (I), fundamentally changing the device from a voltmeter to an ammeter. This violates the design specification requiring voltage measurement between terminals vp and vn."
	}
]