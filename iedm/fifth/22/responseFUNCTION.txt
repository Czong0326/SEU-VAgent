[
	{
		"original_line": "input_expr = iin_val*iin_val;", 
		"bug_line": "input_expr = iin_val;",
		"error_description": "In RMS mode, the module must compute the square of the input current for correct RMS calculation. Removing the squaring operation causes the integration to use raw current values instead of squared values, leading to fundamentally incorrect RMS results."
	},
	{
		"original_line": "$fstrobe(out_file,"# Generated by Spectre from module `%M'");", 
		"bug_line": "$fstrobe(1,"# Generated by Spectre from module `%M'");",
		"error_description": "The header is written to standard output (file descriptor 1) instead of the log file, causing the log file to lack identification and potentially corrupting measurement data parsing."
	},
	{
		"original_line": "         if (log_to_file ) begin", 
		"bug_line": "         if (log_to_file == 0 ) begin",
		"error_description": "Changed condition to log only when log_to_file=0 (disabled) instead of when enabled. This inverts the logging behavior: files are created when logging is disabled and not created when enabled."
	},
	{
		"original_line": "`define ABSOLUTE 0", 
		"bug_line": "`define ABSOLUTE 1",
		"error_description": "Sets ABSOLUTE and RMS modes to the same value (1). This causes absolute current measurement mode to incorrectly trigger RMS calculations, violating functional separation between measurement types."
	},
	{
		"original_line": "real input_expr;", 
		"bug_line": "real input_expr = 0;",
		"error_description": "Initializing input_expr to 0 creates a persistent state between time steps. This causes incorrect RMS calculations as the squared current value doesn't reset properly at each timestep, accumulating historical data incorrectly."
	},
	{
		"original_line": "V(vp,vn) <+ 0;", 
		"bug_line": "V(vp,vn) <+ 1.0;",
		"error_description": "This modification introduces a fixed 1V voltage drop across the ammeter terminals, making it intrusive and altering circuit behavior. An ideal ammeter must have zero voltage drop to avoid affecting measured currents."
	},
	{
		"original_line": "if ($abstime > `ABSTOL_TIME)", 
		"bug_line": "if ($abstime < `ABSTOL_TIME)",
		"error_description": "The condition incorrectly activates RMS current calculation only during the initial 1e-12 second transient period instead of the intended steady-state operation. This causes the RMS measurement to freeze after the initial transient, resulting in permanently inaccurate readings as subsequent current changes are ignored."
	},
	{
		"original_line": "electrical vinter1,vinter2, vgnd;", 
		"bug_line": "electrical vinter1,vinter2;",
		"error_description": "Removed vgnd declaration causing undefined reference errors in V(vgnd) assignments and svcvs connections, breaking ground reference for the filter circuit."
	},
	{
		"original_line": "parameter real bw = 10 from [0:inf);", 
		"bug_line": "parameter real bw = -10 from [0:inf);",
		"error_description": "Default bandwidth set to -10 (negative) which violates non-negative constraint. This causes the value to clamp to 0, disabling filtering by default instead of using 10Hz as intended."
	},
	{
		"original_line": "V(vgnd) <+ 0;", 
		"bug_line": "V(vp) <+ 0;",
		"error_description": "Incorrectly shorting the vp input terminal to ground instead of the internal vgnd node. This creates a direct short to ground at the measurement input, making current measurements impossible and potentially damaging the circuit."
	},
	{
		"original_line": "      if (mtype == `RMS) begin", 
		"bug_line": "      if (mtype == `ABSOLUTE) begin",
		"error_description": "The condition incorrectly checks for ABSOLUTE mode instead of RMS mode. This causes the RMS calculation logic to execute when ABSOLUTE mode is selected (where input_expr isn't properly set), while the absolute measurement executes during RMS mode requests, fundamentally swapping the measurement behaviors."
	},
	{
		"original_line": "real integ_vin_sqd; // for rms calculation", 
		"bug_line": "integer integ_vin_sqd; // for rms calculation",
		"error_description": "Changed 'integ_vin_sqd' from real to integer type, causing truncation of fractional values in RMS calculations. This loses precision in the integrated squared current value, leading to inaccurate RMS measurements."
	},
	{
		"original_line": "parameter integer mtype = `ABSOLUTE;", 
		"bug_line": "parameter integer mtype = `RMS;",
		"error_description": "Changed default measurement type from absolute to RMS, violating the design specification that requires absolute current measurement by default. This causes incorrect current conversion in applications expecting absolute values."
	},
	{
		"original_line": "parameter integer log_to_file = 0;", 
		"bug_line": "parameter integer log_to_file = -1;",
		"error_description": "Assigning negative value to log_to_file violates boolean semantics. The analog block uses 'if(log_to_file)' which expects 0 (false) or positive (true). Negative values cause undefined behavior in the file logging condition."
	},
	{
		"original_line": "input_expr = iin_val*iin_val;", 
		"bug_line": "input_expr = iin_val;",
		"error_description": "In RMS mode, the current should be squared before integration to compute the correct RMS value. The modification removes the squaring operation, causing the integrator to process the raw current instead of its square. This results in an incorrect RMS calculation since the final value becomes sqrt(integral(i)/t) instead of sqrt(integral(iÂ²)/t)."
	},
	{
		"original_line": "`define RMS 1", 
		"bug_line": "`define RMS 0",
		"error_description": "Sets RMS macro value to 0 (same as ABSOLUTE), causing RMS measurement mode to be incorrectly interpreted as absolute mode and vice versa due to identical numeric values."
	},
	{
		"original_line": "V(vout) <+ vout_val;", 
		"bug_line": "V(vout) <+ vout_val * vout_val;",
		"error_description": "The output voltage is incorrectly set to the square of vout_val instead of the actual measured value. This transforms the linear output into a quadratic function, distorting both absolute and RMS current measurements and violating the design specification that requires direct voltage representation of the measured current."
	},
	{
		"original_line": "         if (log_to_file ) begin", 
		"bug_line": "         if (log_to_file == 0 ) begin",
		"error_description": "The condition incorrectly checks if log_to_file equals 0 instead of verifying non-zero status. This inverts the logging behavior: files are created when logging should be disabled (log_to_file=0), and logging is skipped when enabled (log_to_file=1)."
	},
	{
		"original_line": "vin_filter =  iin_val;", 
		"bug_line": "vin_filter =  0;",
		"error_description": "In absolute mode, the ammeter always outputs zero instead of the measured current, violating the design specification that requires actual current measurement."
	},
	{
		"original_line": "         if (log_to_file) $fclose(out_file);", 
		"bug_line": "         $fclose(out_file);",
		"error_description": "The file close operation now occurs unconditionally, even when logging is disabled (log_to_file=0). When logging is disabled, 'out_file' is uninitialized (defaulting to 0), causing an attempt to close standard input (file descriptor 0) during final_step. This violates file handling safety and may crash simulations."
	}
]