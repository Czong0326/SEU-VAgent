[
	{
		"original_line": "parameter real vleak = 0;", 
		"bug_line": "parameter real vleak = 0",
		"error_description": "Missing semicolon at end of parameter declaration"
	},
	{
		"original_line": "      vout_val = vleak;", 
		"bug_line": "      vout_val = vleak",
		"error_description": "Missing semicolon at the end of the assignment statement, causing a syntax error as VerilogA requires all statements to be properly terminated."
	},
	{
		"original_line": "      @ ( initial_step ) begin", 
		"bug_line": "      @ ( initial_step  begin",
		"error_description": "Missing closing parenthesis ')' in event control specification. The compiler will expect a closing parenthesis after 'initial_step', causing a syntax error due to unbalanced parentheses."
	},
	{
		"original_line": "vin_val = V(vin_p, vin_n);", 
		"bug_line": "vin_val = V(vin_p vin_n);",
		"error_description": "Missing comma between function arguments causes syntax error - VerilogA requires commas to separate arguments in function calls."
	},
	{
		"original_line": "parameter real vdead_low = -10;", 
		"bug_line": "parameter real vdead_low = -10",
		"error_description": "Missing semicolon at the end of the parameter declaration, causing a syntax error as VerilogA requires semicolons to terminate parameter statements."
	},
	{
		"original_line": "      vout_val = vleak;", 
		"bug_line": "      vout_val = vleak",
		"error_description": "Missing semicolon at the end of the assignment statement, causing a syntax error as statements in analog blocks must be properly terminated."
	},
	{
		"original_line": "   analog begin", 
		"bug_line": "   analog beginn",
		"error_description": "Misspelled keyword 'beginn' instead of 'begin' creates an unrecognized token, breaking the analog block declaration syntax."
	},
	{
		"original_line": "   real vout_val, vin_val;", 
		"bug_line": "   real vout_val vin_val;",
		"error_description": "Missing comma between variable declarations in a real type declaration. VerilogA requires commas to separate multiple variables in a single declaration statement."
	},
	{
		"original_line": "vout_val = vleak;", 
		"bug_line": "vout_val = vleak",
		"error_description": "Missing semicolon at the end of the assignment statement, which is required to terminate VerilogA statements."
	},
	{
		"original_line": "         vout_val = gain_high * (vin_val - vdead_high) + vleak;", 
		"bug_line": "         vout_val = gain_high * (vin_val - vdead_high + vleak;",
		"error_description": "Missing closing parenthesis for the expression (vin_val - vdead_high, resulting in unbalanced parentheses."
	},
	{
		"original_line": "      end else if (vin_val <= vdead_low) begin", 
		"bug_line": "      end else if (vin_val =< vdead_low) begin",
		"error_description": "Invalid operator '=<' used instead of correct relational operator '<='. VerilogA requires '<=' for less-than-or-equal comparison."
	},
	{
		"original_line": "	    $finish;", 
		"bug_line": "	    $finish",
		"error_description": "Missing semicolon at the end of the statement"
	},
	{
		"original_line": "vout_val = vleak;", 
		"bug_line": "vout_val = vleak",
		"error_description": "Missing semicolon at statement termination"
	},
	{
		"original_line": "output vout;", 
		"bug_line": "output vout",
		"error_description": "Missing semicolon at end of port declaration statement."
	},
	{
		"original_line": " if (vdead_high <= vdead_low) begin", 
		"bug_line": " if (vdead_high =< vdead_low) begin",
		"error_description": "Invalid operator '=<' used instead of '<=' for less-than-or-equal comparison. The correct operator is '<=' in VerilogA."
	},
	{
		"original_line": "parameter real gain_high = 1;", 
		"bug_line": "parameter real gain_high = 1",
		"error_description": "Missing semicolon at the end of the parameter declaration. VerilogA requires semicolons to terminate parameter statements."
	},
	{
		"original_line": "module voltage_dba(vin_p, vin_n, vout);", 
		"bug_line": "moduel voltage_dba(vin_p, vin_n, vout);",
		"error_description": "Misspelled keyword 'module' as 'moduel', causing an unrecognized declaration error."
	},
	{
		"original_line": "   real vout_val, vin_val;", 
		"bug_line": "   real vout_val, vin_val",
		"error_description": "Missing semicolon at the end of the variable declaration statement, causing a syntax error as the next token 'analog' becomes unexpected."
	},
	{
		"original_line": "@ ( initial_step ) begin", 
		"bug_line": "@ ( initial_step begin",
		"error_description": "Missing closing parenthesis for the event control expression. The event specification requires balanced parentheses around 'initial_step'."
	},
	{
		"original_line": "vout_val = gain_low * (vin_val - vdead_low) + vleak;", 
		"bug_line": "vout_val = gain_low * (vin_val - vdead_low + vleak;",
		"error_description": "Missing closing parenthesis for the multiplication expression, causing an unmatched opening parenthesis syntax error."
	}
]