[
	{
		"original_line": "   for (i=0; i<Npair; i=i+1) begin", 
		"bug_line": "   for (i=0; i<Npair i=i+1) begin",
		"error_description": "Missing semicolon between loop condition and increment expression in for statement"
	},
	{
		"original_line": "    else real_gain = pow(10.0,gain/20.0);", 
		"bug_line": "    else real_gain = pow(10.0,gain/20.0)",
		"error_description": "Missing semicolon at the end of the assignment statement. VerilogA requires all statements to terminate with a semicolon."
	},
	{
		"original_line": "real tmp, realtmp, imagtmp;", 
		"bug_line": "reel tmp, realtmp, imagtmp;",
		"error_description": "Misspelled keyword 'real' as 'reel', which is not a valid VerilogA data type"
	},
	{
		"original_line": "`include "constants.vams"", 
		"bug_line": "`include "constants.vams",
		"error_description": "Unterminated string literal in `include directive due to missing closing double quote"
	},
	{
		"original_line": "   real  poles[0:`N*2 -1], zerod[0:`N];", 
		"bug_line": "   real  poles[0:`N*2 -1] zerod[0:`N];",
		"error_description": "Missing comma between array declarations 'poles' and 'zerod'"
	},
	{
		"original_line": "   |    --------   |", 
		"bug_line": "   |    --------   | * /",
		"error_description": "Added space in '*/' comment terminator creates unterminated block comment. The token '/'' is invalid outside a comment, causing syntax errors."
	},
	{
		"original_line": "        if (imagtmp > 0) begin", 
		"bug_line": "        if (imagtmp > 0 begin",
		"error_description": "Missing closing parenthesis in conditional expression"
	},
	{
		"original_line": " end // init step ", 
		"bug_line": " endd // init step ",
		"error_description": "Misspelled keyword 'end' as 'endd', which is not a valid VerilogA keyword. This causes a syntax error as the initial_step block isn't properly terminated."
	},
	{
		"original_line": "        tmp = sqrt(realtmp*realtmp + imagtmp*imagtmp);", 
		"bug_line": "        tmp = sqrt(realtmp*realtmp + imagtmp*imagtmp;",
		"error_description": "Missing closing parenthesis for the sqrt function call. The expression inside sqrt requires balanced parentheses."
	},
	{
		"original_line": "   wb2 = wb * wb;", 
		"bug_line": "   wb2 = wb wb;",
		"error_description": "Missing multiplication operator between operands 'wb' and 'wb'"
	},
	{
		"original_line": " end // init step ", 
		"bug_line": " ned // init step ",
		"error_description": "Misspelled keyword 'end' as 'ned', causing an undefined keyword syntax error"
	},
	{
		"original_line": "        poles[IntegTmp+1] =  im_pole + imagtmp;", 
		"bug_line": "        poles[IntegTmp+1) =  im_pole + imagtmp;",
		"error_description": "Mismatched brackets: closing parenthesis ')' used instead of square bracket ']' for array indexing, causing a syntax error."
	},
	{
		"original_line": " I(outn) <+ (V(outn) + vout)/rout;", 
		"bug_line": " I(outn) <+ (V(outn) + vout)/rout",
		"error_description": "Missing semicolon at the end of the contribution statement, causing syntax error in analog block"
	},
	{
		"original_line": "        poles[IntegTmp+3] = -im_pole - imagtmp;", 
		"bug_line": "        poles[IntegTmp+3 = -im_pole - imagtmp;",
		"error_description": "Missing closing bracket ']' in array index, causing syntax error."
	},
	{
		"original_line": "end else begin", 
		"bug_line": "end else begn",
		"error_description": "Misspelled 'begin' keyword as 'begn', causing unrecognized token syntax error"
	},
	{
		"original_line": "  if (realtmp == 0) teta = `M_PI / 2;", 
		"bug_line": "  if (realtmp == 0 teta = `M_PI / 2;",
		"error_description": "Missing closing parenthesis ')' in the condition of the if statement, making the syntax invalid."
	},
	{
		"original_line": "        if (realtmp == 0) teta = -`M_PI / 2;", 
		"bug_line": "        if realtmp == 0) teta = -`M_PI / 2;",
		"error_description": "Missing opening parenthesis '(' for the conditional expression in the if statement, making the syntax invalid."
	},
	{
		"original_line": "        poles[IntegTmp+3] = -imagtmp/2;", 
		"bug_line": "        poles[IntegTmp+3] = -imagtmp/2",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "   wg2 = `M_TWO_PI * `M_TWO_PI * fupper * flower;", 
		"bug_line": "   wg2 = `M_TWO_PI * `M_TWO_PI * fupper * flower",
		"error_description": "Missing semicolon at end of statement causes syntax error as next token 'wg' becomes part of invalid expression"
	},
	{
		"original_line": "   parameter real flower = 1e6 from (0:fupper);", 
		"bug_line": "   parameter real flower = 1e6 from (0;fupper);",
		"error_description": "Replaced colon ':' with semicolon ';' in the range expression (0;fupper), making it invalid syntax for specifying a numerical range."
	}
]