[
	{
		"original_line": "    if ( cnt == psamples ) begin ", 
		"bug_line": "    if ( cnt == psamples  begin ",
		"error_description": "Missing closing parenthesis in condition of if statement"
	},
	{
		"original_line": "    if ( cnt2 == psamples ) begin ", 
		"bug_line": "    if ( cnt2 = psamples ) begin ",
		"error_description": "Assignment operator '=' used in conditional expression instead of equality operator '==', causing syntax error."
	},
	{
		"original_line": "outReal = 0.5*outReal + 0.5*tr_time[i-N+cyc] / N;", 
		"bug_line": "outReal = 0.5*outReal + 0.5*tr_time[i-N+cyc] / N:",
		"error_description": "Missing semicolon at end of statement (colon instead of semicolon)"
	},
	{
		"original_line": "        outReal = 0.5*outReal + 0.5*tr_time[i-N+cyc] / N;", 
		"bug_line": "        outReal = 0.5*outReal + 0.5*tr_time[i-N+cyc / N;",
		"error_description": "Missing closing square bracket ']' for array index access. The expression 'tr_time[i-N+cyc' is missing the required bracket to close the array index, causing a syntax error."
	},
	{
		"original_line": "    pilotsSign[2] = 1;", 
		"bug_line": "    pilotsSign[2] = 1",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "        if( n == pilotsIdx[i] + 2*halfCs - 1 - uc) begin", 
		"bug_line": "        if( n == pilotsIdx[i) + 2*halfCs - 1 - uc) begin",
		"error_description": "Mismatched square bracket in array index - opening '[' doesn't have corresponding closing ']'"
	},
	{
		"original_line": "        end else begin", 
		"bug_line": "        end else begn",
		"error_description": "Misspelled 'begin' as 'begn', causing an invalid keyword syntax error"
	},
	{
		"original_line": "integer tmp,  i, j, n;", 
		"bug_line": "integer tmp,  i j, n;",
		"error_description": "Missing comma between variable declarations 'i' and 'j'"
	},
	{
		"original_line": "                    twar = cos(pha*j);", 
		"bug_line": "                    twar = cos(pha*j)",
		"error_description": "Missing semicolon at end of statement"
	},
	{
		"original_line": "@(timer(initial_time, input_period  ) ) begin", 
		"bug_line": "@(timer(initial_time, input_period  )) begin",
		"error_description": "Mismatched parentheses due to missing opening parenthesis for the timer function call. The expression requires proper nesting: @(timer(...))"
	},
	{
		"original_line": "real initial_time, outReal, outImag;", 
		"bug_line": "real initial_time, outReal outImag;",
		"error_description": "Missing comma between variable declarations causes 'outImag' to be interpreted as part of 'outReal' instead of a separate identifier."
	},
	{
		"original_line": "        newSymbol = 1;", 
		"bug_line": "        newSymbol = 1",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "    cnt = 0;", 
		"bug_line": "    cnt = 0",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "        Re_time[i4+2] = Re_time[i4+2] + (Ar+Br-Cr-Dr)*twmbr - (Ai+Bi-Ci-Di)*twmbi;", 
		"bug_line": "        Re_time[i4+2] = Re_time[i4+2] + (Ar+Br-Cr-Dr)*twmbr - (Ai+Bi-Ci-Di}*twmbi;",
		"error_description": "Mismatched curly brace: Replaced closing parenthesis ')' with curly brace '}' in the second term (Ai+Bi-Ci-Di}, causing syntax error due to invalid grouping operator."
	},
	{
		"original_line": "        pha = `M_TWO_PI/N;", 
		"bug_line": "        pha = `M_TWO_PI/N",
		"error_description": "Missing semicolon at the end of the statement"
	},
	{
		"original_line": "parameter integer poly[0:poly_order]= {1, 0, 0, 1, 0, 0, 0, 1};", 
		"bug_line": "parameter integer poly[0:poly_order]= {1, 0, 0, 1, 0, 0, 0, 1];",
		"error_description": "Mismatched closing bracket: Array initialization uses curly braces {}, but a square bracket ] is used instead of closing brace."
	},
	{
		"original_line": "           twar = cos(pha*j);", 
		"bug_line": "           twar = cos(pha*j;",
		"error_description": "Missing closing parenthesis for the cos function call, making the argument list incomplete and violating VerilogA function syntax rules."
	},
	{
		"original_line": "    pilotsIdx[1] = -7;", 
		"bug_line": "    pilotsIdx[1] = -7",
		"error_description": "Missing semicolon at the end of the assignment statement"
	},
	{
		"original_line": "        newSymbol2 = 0;", 
		"bug_line": "        newSymbol2 = 0",
		"error_description": "Missing semicolon at the end of the assignment statement, causing unterminated expression before 'end' keyword"
	},
	{
		"original_line": "            else tmp = n + lc - halfCs;", 
		"bug_line": "            else tmp = n + lc - halfCs",
		"error_description": "Missing semicolon at the end of the assignment statement, causing a syntax error as the next token 'Re_freq' will be parsed as part of the same expression."
	}
]